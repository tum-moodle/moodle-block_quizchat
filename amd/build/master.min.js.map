{"version":3,"file":"master.min.js","sources":["../src/master.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {call as fetchMany} from 'core/ajax';\nimport {add as addToast} from 'core/toast';\nimport $ from 'jquery';\nimport {queue_typeset as cardbodyMathJax} from 'block_quizchat/load-mathjax';\nimport * as Instructor from 'block_quizchat/instructor';\nimport {\n    autofill_users_select,\n    update_user_select_status_indicators,\n    btn_msg_me_click,\n    btn_msg_grp_click\n} from 'block_quizchat/instructor';\n\nexport var poll_timeout = 10000;\nvar poll_timeout_id;\nexport var poll_timeout_id_fullscreen;\nvar unnotify_timeout;\nvar unnotify_timeout_id;\nexport var quizchatid = 0;\nexport var quizchat_userid = 0;\nlet processedDates = {};\nexport var quizchat_msg = {\n    \"messages\": []\n};\nexport var quizchat_msg_prev = {\n    \"messages\": []\n};\nexport var quizchat_msg_usr_or_qs = {\n    \"messages\": []\n};\nexport var quizchat_msg_counters = {\n    \"messages\": []\n};\nexport var quizchat_users = [];\n\nconst init_quizchat_users = (users = []) => {\n    quizchat_users = [\n        {\n            // The everyone 'group'\n            'id': quizchat_address_everyone,\n            'lastname': lang_strings['everyone'],\n            'firstname': '(' + lang_strings['group'] + ')',\n            'fullname': lang_strings['everyone'],\n            'state': 'finished'\n        },\n        {\n            // The instructors 'group'\n            'id': quizchat_address_instructors,\n            'lastname': lang_strings['instructors'],\n            'firstname': '(' + lang_strings['group'] + ')',\n            'fullname': lang_strings['instructors'],\n            'state': 'finished'\n        }\n    ];\n    if (Array.isArray(users) && 0 < users.length) {\n        quizchat_users.push(...users.filter(u => { if(![0, 1].includes(u.id)) { return u; } } ));\n    }\n};\n\nexport const push_quizchat_users = ( users = [] ) => {\n    let new_users = users.filter( u => {\n        let i = quizchat_users.findIndex( qc_u => qc_u.id === u.id );\n        if( -1 === i ) {\n            // In case that user is not yet known from previous messages\n            // return it to be pushed onto the quizchat_users array\n            return u;\n        } else {\n            // if that user is indeed already known to the quizchat_users array\n            // update that entry with fresh data\n            if (![quizchat_address_everyone, quizchat_address_instructors].includes(i)) {\n                if (typeof u.state !== 'undefined')\n                {\n                    quizchat_users[i] = u;\n                }\n            }\n        }\n    });\n    quizchat_users.push(...new_users);\n};\n\nconst enrolled_states = ['abandoned','inprogress','noattempt','finished'];\n\n// Make sure notifications and msg highlighting do not occur\n// due to simple page reload\nvar page_reloaded = true;\nvar getmsgs_mostrecentmsg_id = 0;\nvar most_recent_msg_id = 0;\n\nexport let lang_strings = {};\n\nexport const quizchat_address_everyone = 0;\nexport const quizchat_address_instructors = -1;\nexport const quizchat_address_question_group = -2;\nexport const quizchat_student_question_id = -1;\nexport const quizchat_general_question_id = 0;\nexport const allmsgs_id = -1;\n\nexport var no_drawer = false;\nexport var full_screen_flag;\n\n// use this in other modules to restart polling\nexport const reset_poll_timeout = () => {\n    clearTimeout(poll_timeout_id);\n    poll_messages(quizchatid);\n};\n\nexport const reset_poll_timeout_fullscreen = () => {\n    clearTimeout(poll_timeout_id_fullscreen);\n    poll_messages(quizchatid);\n};\n\nexport const reset_timeoutid_fullscreen = () => {\n    poll_timeout_id_fullscreen = setTimeout(poll_messages, poll_timeout, quizchatid);\n};\n\nexport const int_sessionStorage = (key) => {\n    let val = sessionStorage.getItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key);\n    if(null === val) {\n        return 0;\n    } else if (val == \"true\") {\n        return true;\n    }else if (val == \"false\") {\n        return false;\n    }else if (val == \"-1\") {\n        return -1;\n    } else {\n        return parseInt(val);\n    }\n};\n\nexport const write_sessionStorage = (key, val) => {\n    sessionStorage.setItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key, val);\n};\n\nexport const poll_messages = (quizchatid) => {\n    const followUp = (data) => {\n        let user_or_qs_id = int_sessionStorage('selected_user_or_question_id');\n        let group_session = int_sessionStorage('grp_flag');\n        most_recent_msg_id = (!full_screen_flag || user_or_qs_id == -1 ? int_sessionStorage('latest_msg_id')\n        : int_sessionStorage('latest_msg_id_usr_qs'));\n        getmsgs_mostrecentmsg_id = 0;\n        let user_or_question, usr_or_ques_msgs, usr_or_ques_msgs_str;\n        if(full_screen_flag && user_or_qs_id >= 0) {\n            user_or_question = (group_session ? data.groups.find(\n                el => el.question_id === user_or_qs_id\n            )\n            : data.p_users.find(el => el.userid === user_or_qs_id));\n            if(typeof user_or_question != 'undefined') {\n                usr_or_ques_msgs_str = user_or_question.message_ids.replace(/\\s/g, '');\n                usr_or_ques_msgs_str = usr_or_ques_msgs_str.split(',');\n                usr_or_ques_msgs = usr_or_ques_msgs_str.map(id => parseInt(id));\n            }\n            else {\n                usr_or_ques_msgs = [];\n            }\n        }\n        let filteredMessages, msgs_length;\n        if(full_screen_flag && user_or_qs_id >= 0) {\n            if(usr_or_ques_msgs.length > 0) {\n                // Filter the messages where the id is present in usr_or_ques_msgs\n                filteredMessages = data.messages.filter(msg => usr_or_ques_msgs.includes(msg.id));\n            } else {\n                filteredMessages = [];\n            }\n        }\n        else {\n            filteredMessages = data.messages;\n        }\n        msgs_length = filteredMessages.length;\n        if(msgs_length > 0)\n        {\n            let total_unread_msg = int_sessionStorage('total_unread_msg');\n            let diff = filteredMessages.filter(msg => most_recent_msg_id < msg.id).length;\n            total_unread_msg += filteredMessages.filter(\n                msg => (most_recent_msg_id < msg.id) && (msg.userid !== quizchat_userid)).length;\n            // Only update notification when a new msg arrives,\n            // even if unread messages remain.\n            if(most_recent_msg_id < filteredMessages[msgs_length -1].id || page_reloaded) {\n                if(!full_screen_flag || user_or_qs_id == -1) {\n                    write_sessionStorage('total_unread_msg', total_unread_msg);\n                } else {\n                    write_sessionStorage('total_unread_msg_usr_qs', 0);\n                }\n                // Assign fresh data to global quizchat_msg\n                quizchat_msg_prev = quizchat_msg;\n                quizchat_msg = data;\n                quizchat_msg_counters = compare_actual_and_prev_data(quizchat_msg_prev, quizchat_msg);\n                if(full_screen_flag && user_or_qs_id >= 0) {quizchat_msg_usr_or_qs = filteredMessages;}\n                if(page_reloaded){\n                    page_reloaded = false;\n                    update_msg_area(msgs_length);\n                } else {\n                    update_msg_area(diff);\n                }\n                update_notification(filteredMessages[msgs_length -1]);\n                if(!full_screen_flag || user_or_qs_id == -1){\n                    write_sessionStorage('latest_msg_id', filteredMessages[msgs_length -1].id);\n                } else {\n                    write_sessionStorage('latest_msg_id_usr_qs', filteredMessages[msgs_length -1].id);\n                }\n            }\n            else {\n                quizchat_msg_prev = quizchat_msg;\n                quizchat_msg = data;\n                quizchat_msg_counters = compare_actual_and_prev_data(quizchat_msg_prev, quizchat_msg);\n                if(full_screen_flag && user_or_qs_id >= 0){\n                    quizchat_msg_usr_or_qs = filteredMessages;\n                }\n                update_message_headers();\n                update_sidemenu_status();\n                update_header_status();\n                if((typeof $('#conversations_container_private').html()) != 'undefined') {\n                    btn_msg_me_click();\n                }\n                if((typeof $('#conversations_container_group').html()) != 'undefined') {\n                    btn_msg_grp_click();\n                }\n            }\n        }\n        else if (msgs_length == 0) {\n            empty_private_group_msgs_count();\n            quizchat_msg_prev = quizchat_msg;\n            quizchat_msg = data;\n            quizchat_msg_counters = compare_actual_and_prev_data(quizchat_msg_prev, quizchat_msg);\n            if(full_screen_flag && user_or_qs_id >= 0){\n                quizchat_msg_usr_or_qs = filteredMessages;\n            }\n            update_message_headers();\n            update_sidemenu_status();\n            update_header_status();\n            if((typeof $('#conversations_container_private').html()) != 'undefined') {\n                btn_msg_me_click();\n            }\n            if((typeof $('#conversations_container_group').html()) != 'undefined') {\n                btn_msg_grp_click();\n            }\n        }\n    };\n    const calls = [\n        {\n            methodname: 'block_quizchat_get_messages',\n            args: {\n                \"quizchatid\": quizchatid,\n                \"most_recent_msg_id\": getmsgs_mostrecentmsg_id,\n                \"langstr_general\" : lang_strings['student_question_general'],\n                \"langstr_group\" : lang_strings['group_txt'],\n                \"langstr_attempt\" : lang_strings['quiz_attempt_txt'],\n                \"langstr_all\" : lang_strings['everyone'],\n                \"langstr_strftimerecentfull\" : lang_strings['strftimerecentfull']\n            }\n        }\n    ];\n    fetchMany(calls)[0]\n        .then(\n            data => {\n                if(0 < data.stats.msg_total){\n                    data.messages.sort(\n                        (a,b) => {\n                            return (a.timestamp > b.timestamp);\n                        }\n                    );\n                    let userdata=[];\n                    const usersMap = new Map();\n                    data.messages.forEach(message => {\n                        // Extract sender user data\n                        if (!usersMap.has(message.userid)) {\n                            usersMap.set(message.userid, {\n                                id: message.userid,\n                                lastname: message.lastname,\n                                firstname: message.firstname,\n                                fullname: message.fullname,\n                                profileimageurlsmall: message.picture,\n                                state: message.state\n                            });\n                        }\n                    });\n                    data.messages.forEach(message => {\n                        if(message.receiverid != quizchat_address_question_group) {\n                            // Extract receiver user data\n                            if (!usersMap.has(message.receiverid)) {\n                                usersMap.set(message.receiverid, {\n                                    id: message.receiverid,\n                                    lastname: message.rlastname,\n                                    firstname: message.rfirstname,\n                                    fullname: message.rfullname\n                                });\n                            }\n                        }\n                        else {\n                            // Extract receiver user data\n                            if (!usersMap.has(message.receiverid)) {\n                                usersMap.set(message.receiverid + '/' + message.rfullname, {\n                                    id: message.receiverid + '/' + message.rfullname,\n                                    lastname: message.rlastname,\n                                    firstname: message.rfirstname,\n                                    fullname: message.rfullname\n                                });\n                            }\n                        }\n                    });\n                    userdata = Array.from(usersMap.values());\n                    if(0 < userdata.length){\n                        push_quizchat_users(userdata);\n                        // Could this be done nicer?\n                        // Async nature of things seems to make this necessary\n                        followUp(data);\n                    } else {\n                        followUp(data);\n                    }\n                }\n                else if(0 > data.stats.msg_total){\n                    followUp(data);\n                    empty_private_group_msgs_count();\n                }\n        });\n    poll_timeout_id = setTimeout(poll_messages, poll_timeout, quizchatid);\n};\n\nconst empty_private_group_msgs_count = () => {\n    if($('#private_msgs_count')) {\n        $('#private_msgs_count').html(\"0\");\n    }\n    if($('#group_msgs_count')) {\n        $('#group_msgs_count').html(\"0\");\n    }\n};\n\nexport const allmsgs_count_notf = () => {\n    let key = 'newmsgscount_all';\n    let msgs_count = sessionStorage.getItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key);\n    if(null === msgs_count) {\n        write_sessionStorage(key, '0');\n        msgs_count = 0;\n    }\n    else {\n        msgs_count = int_sessionStorage(key);\n    }\n    if(msgs_count > 0 ) {\n        $('#all-messages-unread-count').html(String(msgs_count));\n        $('#all-messages-unread-count').attr('aria-hidden','false');\n        $('#all-messages-unread-count-label').removeClass('hidden');\n    }\n    else {\n        $('#all-messages-unread-count').attr('aria-hidden','true');\n        $('#all-messages-unread-count-label').addClass('hidden');\n        $('#all-messages-unread-count').html('');\n    }\n};\n\nexport const getNewMessageCount = (prev, current) => {\n    const prevMessages = prev ? prev.split(',').map(Number) : [];\n    const currentMessages = current ? current.split(',').map(Number) : [];\n    let filteredmsgs = quizchat_msg.messages.filter(msg => currentMessages.includes(msg.id));\n    const newMessages = filteredmsgs.filter(msg => !prevMessages.includes(msg.id) &&\n    msg.id > int_sessionStorage('latest_msg_id') && (msg.userid != quizchat_userid));\n    return newMessages.length;\n};\n\nexport const calculateUserMessageCounts = (prevUsers, currUsers) => {\n    return currUsers.map(currUser => {\n        const prevUser = prevUsers.find(u => u.userid === currUser.userid);\n        const new_msgs_count = prevUser\n            ? getNewMessageCount(prevUser.message_ids, currUser.message_ids)\n            : currUser.message_ids.replace(/\\s/g, '').split(',').length; // All messages are new for a new user\n        // Determine if there is a new conversation\n        const new_conversation = !prevUser || new_msgs_count > 0;\n        return { ...currUser, new_msgs_count, new_conversation };\n    });\n};\n\nexport const calculateGroupMessageCounts = (prevGroups, currGroups) => {\n    return currGroups.map(currGroup => {\n        const prevGroup = prevGroups.find(g => g.question_id === currGroup.question_id);\n        const new_msgs_count = prevGroup\n            ? getNewMessageCount(prevGroup.message_ids, currGroup.message_ids)\n            : currGroup.message_ids.replace(/\\s/g, '').split(',').length; // All messages are new for a new group\n        // Determine if there is a new conversation\n        const new_conversation = !prevGroup || new_msgs_count > 0;\n        return { ...currGroup, new_msgs_count, new_conversation };\n    });\n};\n\nexport const compare_actual_and_prev_data = (prevData, currData) => {\n    const newUserCounts = calculateUserMessageCounts(prevData.p_users || currData.p_users, currData.p_users);\n    const newGroupCounts = calculateGroupMessageCounts(prevData.groups || currData.groups, currData.groups);\n    return {\n        p_users: newUserCounts,\n        groups: newGroupCounts\n    };\n};\n\nexport const update_current_msgs_array = (current_msgs) => {\n    if(current_msgs.length > 0) {\n        quizchat_msg_usr_or_qs = current_msgs;\n        most_recent_msg_id = current_msgs[current_msgs.length - 1].id;\n        processedDates = {};\n    }\n};\n\nexport const update_msg_area = (diff) => {\n    let msgs, last_received_msg_id;\n    if(int_sessionStorage('selected_user_or_question_id') >= 0) {\n        msgs = quizchat_msg_usr_or_qs;\n        last_received_msg_id = int_sessionStorage('latest_msg_id_usr_qs');\n    } else if (!full_screen_flag || most_recent_msg_id > 0) {\n        msgs = quizchat_msg.messages;\n        last_received_msg_id = most_recent_msg_id;\n    }\n    if(typeof msgs != 'undefined') {\n        let new_msg = msgs.slice(msgs.length - diff);\n        let profimg = '';\n        let new_msg_user, new_msg_receiver, card_flavor, new_msg_el, msg_time;\n        if (0 < diff) {\n            // Append only new messages to msg area\n            for (let i = 0; i < new_msg.length; i++) {\n                new_msg_user = quizchat_users.find(u => u.id == new_msg[i].userid);\n                //group messaging\n                if (new_msg[i].receiverid == quizchat_address_question_group) {\n                    new_msg_receiver = quizchat_users.find(u => u.id == new_msg[i].receiverid + '/' + new_msg[i].rfullname);\n                } else {\n                    new_msg_receiver = quizchat_users.find(u => u.id == new_msg[i].receiverid);\n                }\n                card_flavor = new_msg[i].userid === quizchat_userid\n                    ? 'bg-secondary'\n                    : 'bg-light border border-secondary'\n                        + (last_received_msg_id < new_msg[i].id ? ' font-weight-bolder' : '');\n                new_msg_el = $('<div class=\"card block_quizchat_msg_el ' + card_flavor\n                + ' mb-1\" data-msg-id=\"' + new_msg[i].id + '\"></div>');\n                msg_time = new Date(new_msg[i].timestamp * 1000);\n                profimg = '<div class=\"imgcontainer\"><img class=\"rounded profileimg\" src=\"'\n                + new_msg_user.profileimageurlsmall\n                + '\" alt=\"' + new_msg_user.fullname + '\" title=\"' + new_msg_user.fullname + '\"></img></div>';\n                let displayDate = isToday(new_msg[i].timestamp) ? lang_strings['today'] : new_msg[i].date_part;\n                // Check if a div for this date already exists\n                if (!processedDates[displayDate]) {\n                    // If not, create a new div for this date\n                    let dateDiv = $('<div class=\"line-with-text\" id=\"'\n                    + displayDate + '\"><hr><span>' + displayDate + '</span><hr></div>');\n                    $('#block_quizchat_messages > .block_quizchat_msg_area_body').append(dateDiv);\n                    processedDates[displayDate] = displayDate;\n                }\n                $(new_msg_el)\n                .append(\n                    $('<div class=\"card-header\"></div>')\n                    .append(\n                        $('<div class=\"msg-header p-0\"></div>')\n                        .append(\n                            $('<div class=\"block_quizchat_user_icon\">')\n                            .append(profimg),\n                            $(\n                                '<div class=\"text-right tofrom from\">'\n                                + lang_strings['from'] + ':</div>'\n                            ),\n                            $(\n                                '<div class=\"fullname text-truncate\" data-address-type=\"from\"'\n                                + ' title=\"' + new_msg_user.fullname + '\">'\n                                + new_msg_user.fullname + '</div>'\n                            ),\n                            $(\n                                '<div class=\"timestamp text-right\">'\n                                + msg_time.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }) + '</div>'\n                            ),\n                            $(\n                                '<div class=\"text-right tofrom to\">'\n                                + lang_strings['to'] + ':</div>'\n                            ),\n                            $(\n                                '<div class=\"fullname text-truncate\" data-address-type=\"to\"'\n                                + ' title=\"' + new_msg_receiver.fullname + '\">'\n                                + new_msg_receiver.fullname + '</div>'\n                            )\n                        )\n                    ),\n                    $(\n                        '<div class=\"card-body\"><div class=\"question-info\"><b>'\n                        + lang_strings['student_question_select'] + ' ' + new_msg[i].questiontxt\n                        + new_msg[i].quizattempt +'</b></div>'\n                        + '<div class=\"msg-txt\">' + new_msg[i].message +'</div>'\n                        + '</div>'\n                    )\n                );\n                if($('#private_msgs_count')) {\n                    $('#private_msgs_count').html(quizchat_msg.stats.private);\n                }\n                if($('#group_msgs_count')) {\n                    $('#group_msgs_count').html(quizchat_msg.stats.group);\n                }\n                $('#block_quizchat_messages > .block_quizchat_msg_area_body').append(new_msg_el);\n                //trigger MathJax to render equations within the element with the class \"card-body\"\n                if (i == new_msg.length-1){\n                    cardbodyMathJax('card-body');\n                    // Scroll to bottom of msg area\n                    $('.block_quizchat_msg_area_body').scrollTop($('.block_quizchat_msg_area_body')[0].scrollHeight);\n                }\n            }\n            if(((typeof $('#conversations_container_private').html()) != 'undefined')) {\n                    btn_msg_me_click();\n            }\n            if((typeof $('#conversations_container_group').html()) != 'undefined') {\n                    btn_msg_grp_click();\n            }\n            // Will unnotify in case drawer is open\n            update_unnotify_timeout();\n            update_message_headers();\n            update_sidemenu_status();\n            update_header_status();\n            update_user_select_status_indicators();\n        }\n    }\n};\n\nconst update_notification = (msg) => {\n    let total_unread_msg = int_sessionStorage('total_unread_msg');\n    if(( quizchat_userid !== msg.userid ) && ( 0 < total_unread_msg )){\n        let diff_string = total_unread_msg + ' ' +\n            (1 < total_unread_msg || 0 == total_unread_msg\n                ? lang_strings['notification_new_msg_plural']\n                : lang_strings['notification_new_msg_singular']\n            );\n        $('.toast').remove();\n        addToast(msg.message, {\n            type: 'info',\n            title: diff_string,\n            subtitle: lang_strings['from'] + ': ' + quizchat_users.find(u => u.id === msg.userid).fullname,\n            closeButton: true,\n            autohide: false,\n            delay: 10000,\n        })\n        .then(() => {\n            if (!no_drawer && !full_screen_flag) {\n                update_toast_style($('#theme_boost-drawers-blocks')[0]);\n            }\n            cardbodyMathJax('toast-wrapper');\n        });\n        $('#block_quizchat_messages > .block_quizchat_msg_area_header').text(diff_string);\n        if(!full_screen_flag)\n        {\n            $('#new_msg_icon').remove();\n            $('.drawer-toggler.drawer-right-toggle').prepend(\n                $('<img src=\"' + M.cfg.wwwroot\n                    + '/blocks/quizchat/img/icon-new-message-30.png\"'\n                    + 'id=\"new_msg_icon\" alt=\"' + diff_string + '\" title=\"' + diff_string + '\"></img>')\n            );\n        }\n    }\n};\n\nexport const isToday = (date) => {\n    let today = new Date();\n    let checkDate = new Date(date * 1000);\n\n    // Reset time part to compare only dates\n    today.setHours(0, 0, 0, 0);\n    checkDate.setHours(0, 0, 0, 0);\n\n    return today.getTime() === checkDate.getTime();\n};\n\nconst unnotify = () => {\n    write_sessionStorage('total_unread_msg', 0);\n    $('.toast').remove();\n    $('.block_quizchat_msg_el.font-weight-bolder').removeClass('font-weight-bolder');\n    if(full_screen_flag)\n    {\n        allmsgs_count_notf();\n        let header_question_or_user_id, header_is_allmsgs = false, side_counter_span_id;\n        if($('#conv-header').data('group-id') !== undefined) {\n            header_question_or_user_id = parseInt($('#conv-header').data('group-id'));\n            if(header_question_or_user_id == allmsgs_id)\n            {\n                header_is_allmsgs = true;\n            }\n            side_counter_span_id = '#unread-count-question-'+header_question_or_user_id;\n        }\n        else if($('#conv-header').data('user-id') !== undefined){\n            header_question_or_user_id = parseInt($('#conv-header').data('user-id'));\n            side_counter_span_id = '#unread-count-user-'+header_question_or_user_id;\n        }\n        if(header_is_allmsgs){\n            $('span[id^=\"unread-count-\"]').attr('aria-hidden','true');\n            $('span[id^=\"unread-count-\"]').parent('span').addClass('hidden');\n            $('span[id^=\"unread-count-\"]').html('');\n        }\n        else {\n            $(side_counter_span_id).attr('aria-hidden','true');\n            $(side_counter_span_id).parent('span').addClass('hidden');\n            $(side_counter_span_id).html('');\n            let session_msgs_count_all = 0;\n            let key_all = 'newmsgscount_all';\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_questionid_') || sessionkey.includes('newmsgscount_userid_')) {\n                    session_msgs_count_all += parseInt(sessionStorage.getItem(sessionkey));\n                }\n            });\n            write_sessionStorage(key_all, String(session_msgs_count_all));\n            allmsgs_count_notf();\n        }\n    } else {\n        $('#block_quizchat_messages > .block_quizchat_msg_area_header').text('0 ' + lang_strings['notification_new_msg_plural']);\n    }\n    $('#new_msg_icon').remove();\n};\n\nconst update_toast_style = (drawer) => {\n    let toast_width = '350';\n    let button = document.querySelector('[data-toggler=\"drawers\"][data-target=\"theme_boost-drawers-blocks\"][data-action=\"toggle\"]');\n    let offset = 0;\n    // No drawers in SEB\n    if (!no_drawer) {\n        if (drawer.classList.contains('show')) {\n            offset = drawer.offsetWidth + 15;\n        } else {\n            offset = button.parentNode.offsetWidth + 15;\n        }\n    }\n    $('.toast').removeClass('mx-auto');\n    $('.toast').css({\n        'position': 'absolute',\n        'right': offset,\n        'width': toast_width,\n        'max-width': toast_width\n    });\n    // Make the small subtitle with the 'from' field truncate too long names\n    $('.toast .toast-subtitle.ml-auto.small').css({\n        'white-space': 'nowrap',\n        'max-width': '200px',\n        'overflow': 'hidden',\n        'text-overflow': 'ellipsis',\n        'text-align': 'right'\n    });\n    $('.toast .toast-message').css({\n        'white-space': 'nowrap',\n        'overflow': 'hidden',\n        'text-overflow': 'ellipsis'\n    });\n    $('.toast-wrapper').removeClass(['mx-auto', 'fixed-top']);\n    $('.toast-wrapper').css({\n        'position': 'absolute',\n        'width': toast_width,\n        'max-width': toast_width,\n        'right': '0'\n    });\n};\n\nconst create_respond_link = (userid, fullname, questionid, questiontxt) => {\n    //'#userid/questionid/questiontxt'\n    let respond_link = document.createElement('a');\n    respond_link.setAttribute('href', '#' + userid + '/' + questionid + '/' + questiontxt);\n    respond_link.setAttribute('id', 'click_to_respond_link_' + userid + '_' + questionid + '_' + questiontxt);\n    respond_link.append(document.createTextNode(fullname));\n    respond_link.addEventListener('click', autofill_users_select);\n    return respond_link;\n};\n\nconst update_message_headers = () => {\n    $('.block_quizchat_msg_el').each(function(i, el) {\n        let msg;\n        if(quizchat_msg.messages.length==1)\n        {\n            msg = quizchat_msg.messages[0];\n        }\n        else\n        {\n            msg = quizchat_msg.messages.find(m => m.id === parseInt(el.getAttribute('data-msg-id')));\n        }\n        let msg_user = quizchat_users.find(u => u.id === msg.userid);\n        // Add or remove respond link depending on user state\n        if (msg.userid !== quizchat_userid) {\n            let fullname_th = $('div.fullname[data-address-type=\"from\"]', $(el));\n            fullname_th.empty();\n            if (enrolled_states.includes(msg_user.state)) {\n                fullname_th.removeClass('fullname_suspended');\n                if (Instructor.is_teacher) {\n                    let $questionlinkobj = $(msg.questiontxt);\n                    // Extract the text inside the <a> tag\n                    let questiontxt = $questionlinkobj.text();\n                    if(questiontxt == '') {\n                        questiontxt = msg.questiontxt;\n                    }\n                    fullname_th.html(create_respond_link(msg.userid, msg_user.fullname, msg.questionid, questiontxt));\n                } else {\n                    fullname_th.text(msg_user.fullname);\n                }\n            } else {\n                if (['suspended', 'deleted', 'unenrolled'].includes(msg_user.state)) {\n                    fullname_th.addClass('fullname_suspended');\n                }\n                fullname_th.text(msg_user.fullname);\n            }\n        }\n        if (Instructor.is_teacher) {\n            // Insert state indicator where necessary\n            // (user is instructor and indicator is not yet there)\n            if ( $('div.imgcontainer div.statecircle-base', $(el)).length <= 0 ) {\n                $('div.imgcontainer', $(el)).append('<div class=\"statecircle-base\"></div>');\n            }\n            // Update state indicator depending on user state\n            let state_indicator = $('div.imgcontainer div.statecircle-base', $(el));\n            state_indicator.attr('title', lang_strings[msg_user.state]);\n            state_indicator.removeClass();\n            state_indicator.addClass('statecircle-base ' + msg_user.state);\n        }\n    });\n};\n\nconst update_sidemenu_status = () => {\n    $('.contact-status-sidemenu').each(function(i, el) {\n        let user;\n        if(quizchat_msg.p_users.length==1)\n        {\n            user = quizchat_msg.p_users[0];\n        }\n        else\n        {\n            user = quizchat_msg.p_users.find(u => u.userid === parseInt(el.getAttribute('data-user-id')));\n        }\n        if (Instructor.is_teacher) {\n            // Update state indicator depending on user state\n            let state_indicator = $('div.statecircle-base', $(el));\n            state_indicator.attr('title', lang_strings[user.state]);\n            state_indicator.removeClass();\n            state_indicator.addClass('statecircle-base ' + user.state);\n        }\n    });\n};\n\nconst update_header_status = () => {\n    let state_indicator = $('#header-state');\n    let written_state_indicator = $('#written-header-state');\n    //update state indicator and written state\n    if (Instructor.is_teacher && state_indicator.length && full_screen_flag && written_state_indicator.length) {\n        let user = quizchat_msg.p_users.find(u => u.userid === parseInt(state_indicator.attr(\"data-user-id\")));\n        if(typeof user == 'undefined') {\n            user = quizchat_users.find(u => u.id === parseInt(state_indicator.attr(\"data-user-id\")));\n        }\n        state_indicator.attr('title', lang_strings[user.state]);\n        state_indicator.removeClass();\n        state_indicator.addClass('statecircle-base ' + user.state);\n        written_state_indicator.html(lang_strings[user.state]);\n    }\n};\n\n// Callback for mutations in drawer class list\nconst drawer_mutation_callback = (mutation) => {\n    $('.block_quizchat_msg_area_body').scrollTop($('.block_quizchat_msg_area_body')[0].scrollHeight);\n    update_unnotify_timeout();\n    update_toast_style(mutation[0].target);\n};\n\n// separate function for this so it is callable from other functions\nconst update_unnotify_timeout = () => {\n    if(!full_screen_flag) {\n        if (no_drawer || $('#theme_boost-drawers-blocks')[0].classList.contains('show')) {\n            unnotify_timeout_id = setTimeout(unnotify, unnotify_timeout);\n        } else {\n            clearTimeout(unnotify_timeout_id);\n        }\n    } else {\n        unnotify_timeout_id = setTimeout(unnotify, unnotify_timeout);\n    }\n};\n\n// setting_poll_timeout to be set in settings.php / admin interface\nexport const init = (arg_quizchat,arg_userid, setting_poll_timeout, setting_unnotify_timeout, no_drawer_flag,\n     langstr_obj, fullscreen_flag) => {\n    // The backend has checked for additional browser security\n    // or a SEB config on this quiz\n    no_drawer = no_drawer_flag;\n    full_screen_flag = fullscreen_flag;\n    // User Id is needed for client to ignore their own messages when\n    // Updating notification\n    quizchat_userid = arg_userid;\n    lang_strings = { ...langstr_obj };\n    // Initialize the quizchat_users array\n    init_quizchat_users();\n    const drawer_blocks = $('#theme_boost-drawers-blocks');\n    const obs_config = { attributes: true, attributeFilter: [\"class\"] };\n    const drawer_blocks_observer = new MutationObserver(drawer_mutation_callback);\n    // Having been checked on the server side, these timeouts are safe\n    poll_timeout = setting_poll_timeout * 1000;\n    unnotify_timeout = setting_unnotify_timeout * 1000;\n    // Drawers do not exist in SEB\n    if (!no_drawer && !full_screen_flag) {\n        drawer_blocks_observer.observe(drawer_blocks[0], obs_config);\n    }\n    quizchatid = arg_quizchat.id;\n    poll_messages(quizchatid);\n};\n\n"],"names":["poll_timeout_id","poll_timeout_id_fullscreen","unnotify_timeout","unnotify_timeout_id","poll_timeout","quizchatid","quizchat_userid","processedDates","quizchat_msg","quizchat_msg_prev","quizchat_msg_usr_or_qs","quizchat_msg_counters","quizchat_users","push_quizchat_users","users","new_users","filter","u","i","findIndex","qc_u","id","quizchat_address_everyone","quizchat_address_instructors","includes","state","push","enrolled_states","page_reloaded","getmsgs_mostrecentmsg_id","most_recent_msg_id","lang_strings","full_screen_flag","no_drawer","clearTimeout","poll_messages","setTimeout","int_sessionStorage","key","val","sessionStorage","getItem","parseInt","write_sessionStorage","setItem","followUp","data","user_or_question","usr_or_ques_msgs","usr_or_ques_msgs_str","filteredMessages","msgs_length","user_or_qs_id","group_session","groups","find","el","question_id","p_users","userid","message_ids","replace","split","map","length","messages","msg","total_unread_msg","diff","compare_actual_and_prev_data","update_msg_area","update_notification","update_message_headers","update_sidemenu_status","update_header_status","html","empty_private_group_msgs_count","calls","methodname","args","then","stats","msg_total","sort","a","b","timestamp","userdata","usersMap","Map","forEach","message","has","set","lastname","firstname","fullname","profileimageurlsmall","picture","receiverid","rlastname","rfirstname","rfullname","Array","from","values","allmsgs_count_notf","msgs_count","String","attr","removeClass","addClass","getNewMessageCount","prev","current","prevMessages","Number","currentMessages","calculateUserMessageCounts","prevUsers","currUsers","currUser","prevUser","new_msgs_count","new_conversation","calculateGroupMessageCounts","prevGroups","currGroups","currGroup","prevGroup","g","prevData","currData","current_msgs","msgs","last_received_msg_id","new_msg_user","new_msg_receiver","card_flavor","new_msg_el","msg_time","new_msg","slice","profimg","Date","displayDate","isToday","date_part","dateDiv","append","toLocaleTimeString","hour","minute","questiontxt","quizattempt","private","group","scrollTop","scrollHeight","update_unnotify_timeout","diff_string","remove","type","title","subtitle","closeButton","autohide","delay","update_toast_style","text","prepend","M","cfg","wwwroot","date","today","checkDate","setHours","getTime","unnotify","header_question_or_user_id","side_counter_span_id","header_is_allmsgs","undefined","parent","session_msgs_count_all","key_all","Object","keys","sessionkey","drawer","button","document","querySelector","offset","classList","contains","offsetWidth","parentNode","css","each","m","getAttribute","msg_user","fullname_th","empty","Instructor","is_teacher","questionid","respond_link","createElement","setAttribute","createTextNode","addEventListener","autofill_users_select","create_respond_link","state_indicator","user","written_state_indicator","drawer_mutation_callback","mutation","target","arg_quizchat","arg_userid","setting_poll_timeout","setting_unnotify_timeout","no_drawer_flag","langstr_obj","fullscreen_flag","isArray","init_quizchat_users","drawer_blocks","obs_config","attributes","attributeFilter","drawer_blocks_observer","MutationObserver","observe"],"mappings":"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"}