{"version":3,"file":"master.min.js","sources":["../src/master.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {call as fetchMany} from 'core/ajax';\nimport {add as addToast} from 'core/toast';\nimport $ from 'jquery';\nimport {queue_typeset as cardbodyMathJax} from 'block_quizchat/load-mathjax';\nimport * as Instructor from 'block_quizchat/instructor';\nimport {\n    autofill_users_select,\n    update_user_select_status_indicators\n} from 'block_quizchat/instructor';\nimport {get_string as getString} from 'core/str';\nimport UserDate from 'core/user_date';\n\nvar poll_timeout = 10000;\nvar poll_timeout_id;\nvar unnotify_timeout;\nvar unnotify_timeout_id;\nvar quizchatid = 0;\nvar quizchat_userid = 0;\nlet processedDates = {};\nexport var quizchat_msg = {\n    \"messages\": []\n};\nexport var quizchat_users = [];\n\nconst init_quizchat_users = (users = []) => {\n    quizchat_users = [\n        {\n            // The everyone 'group'\n            'id': quizchat_address_everyone,\n            'lastname': lang_strings['everyone'],\n            'firstname': '(' + lang_strings['group'] + ')',\n            'fullname': lang_strings['everyone'],\n            'state': 'finished'\n        },\n        {\n            // The instructors 'group'\n            'id': quizchat_address_instructors,\n            'lastname': lang_strings['instructors'],\n            'firstname': '(' + lang_strings['group'] + ')',\n            'fullname': lang_strings['instructors'],\n            'state': 'finished'\n        }\n    ];\n    if (Array.isArray(users) && 0 < users.length) {\n        quizchat_users.push(...users.filter(u => { if(![0, 1].includes(u.id)) { return u; } } ));\n    }\n};\n\nexport const push_quizchat_users = ( users = [] ) => {\n    let new_users = users.filter( u => {\n        let i = quizchat_users.findIndex( qc_u => qc_u.id === u.id );\n        if( -1 === i ) {\n            // In case that user is not yet known from previous messages\n            // return it to be pushed onto the quizchat_users array\n            return u;\n        } else {\n            // if that user is indeed already known to the quizchat_users array\n            // update that entry with fresh data\n            if (![quizchat_address_everyone, quizchat_address_instructors].includes(i)) {\n                if (typeof u.state !== 'undefined')\n                {\n                    quizchat_users[i] = u;\n                }\n            }\n        }\n    });\n    quizchat_users.push(...new_users);\n};\n\nconst enrolled_states = ['abandoned','inprogress','noattempt','finished'];\n\n// Make sure notifications and msg highlighting do not occur\n// due to simple page reload\nvar page_reloaded = true;\nvar getmsgs_mostrecentmsg_id = 0;\nvar most_recent_msg_id = 0;\n\nexport let lang_strings = {};\n\nexport const quizchat_address_everyone = 0;\nexport const quizchat_address_instructors = -1;\nexport const quizchat_address_question_group = -2;\nexport const quizchat_student_question_id = -1;\nexport const quizchat_general_question_id = 0;\n\nexport var no_drawer = false;\nexport var full_screen_flag;\n\n// use this in other modules to restart polling\nexport const reset_poll_timeout = () => {\n    clearTimeout(poll_timeout_id);\n    poll_messages(quizchatid);\n};\n\nexport const int_sessionStorage = (key) => {\n    let val = sessionStorage.getItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key);\n    if(null === val) {\n        return 0;\n    } else {\n        return parseInt(val);\n    }\n};\n\nexport const write_sessionStorage = (key, val) => {\n    sessionStorage.setItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key, val);\n};\n\nexport const poll_messages = (quizchatid) => {\n    most_recent_msg_id = int_sessionStorage('latest_msg_id');\n    getmsgs_mostrecentmsg_id = 0;\n    const followUp = (data) => {\n        if(-1 !== data.stats.msg_total)\n        {\n            let total_unread_msg = int_sessionStorage('total_unread_msg');\n            let diff = data.messages.filter(msg => most_recent_msg_id < msg.id).length;\n            total_unread_msg += data.messages.filter(\n                msg => (most_recent_msg_id < msg.id) && (msg.userid !== quizchat_userid)).length;\n            write_sessionStorage('total_unread_msg', total_unread_msg);\n\n            // Only update notification when a new msg arrives,\n            // even if unread messages remain.\n            if(most_recent_msg_id < data.messages[data.messages.length -1].id || page_reloaded){\n                // Asign fresh data to global quizchat_msg\n                quizchat_msg = data;\n                if(page_reloaded){\n                    page_reloaded = false;\n                    update_msg_area(data.messages.length);\n                    //msg_loaded = true;\n                } else {\n                    update_msg_area(diff);\n                }\n                update_notification(data.messages[data.messages.length -1]);\n                write_sessionStorage('latest_msg_id', quizchat_msg.messages[quizchat_msg.messages.length - 1].id);\n            }\n            else {\n                quizchat_msg = data;\n                update_message_headers();\n            }\n        }\n    };\n    const calls = [\n        {\n            methodname: 'block_quizchat_get_messages',\n            args: {\n                \"quizchatid\": quizchatid,\n                \"most_recent_msg_id\": getmsgs_mostrecentmsg_id,\n                \"langstr_general\" : lang_strings['student_question_general'],\n                \"langstr_group\" : lang_strings['group_txt'],\n                \"langstr_attempt\" : lang_strings['quiz_attempt_txt'],\n                \"langstr_all\" : lang_strings['everyone']\n            }\n        }\n    ];\n    fetchMany(calls)[0]\n        .then(\n            data => {\n                if(0 < data.stats.msg_total){\n                    data.messages.sort(\n                        (a,b) => {\n                            return (a.timestamp > b.timestamp);\n                        }\n                    );\n                    let userdata=[];\n                    const usersMap = new Map();\n                    data.messages.forEach(message => {\n                        // Extract sender user data\n                        if (!usersMap.has(message.userid)) {\n                            usersMap.set(message.userid, {\n                                id: message.userid,\n                                lastname: message.lastname,\n                                firstname: message.firstname,\n                                fullname: message.fullname,\n                                profileimageurlsmall: message.picture,\n                                state: message.state\n                            });\n                        }\n                    });\n                    data.messages.forEach(message => {\n                        if(message.receiverid != quizchat_address_question_group) {\n                            // Extract receiver user data\n                            if (!usersMap.has(message.receiverid)) {\n                                usersMap.set(message.receiverid, {\n                                    id: message.receiverid,\n                                    lastname: message.rlastname,\n                                    firstname: message.rfirstname,\n                                    fullname: message.rfullname\n                                });\n                            }\n                        }\n                        else {\n                            // Extract receiver user data\n                            if (!usersMap.has(message.receiverid)) {\n                                usersMap.set(message.receiverid + '/' + message.rfullname, {\n                                    id: message.receiverid + '/' + message.rfullname,\n                                    lastname: message.rlastname,\n                                    firstname: message.rfirstname,\n                                    fullname: message.rfullname\n                                });\n                            }\n                        }\n                    });\n                    userdata = Array.from(usersMap.values());\n                    if(0 < userdata.length){\n                        push_quizchat_users(userdata);\n                        // Could this be done nicer?\n                        // Async nature of things seems to make this necessary\n                        followUp(data);\n                    } else {\n                        followUp(data);\n                    }\n                }\n                else if(0 > data.stats.msg_total){\n                    followUp(data);\n                }\n        });\n    poll_timeout_id = setTimeout(poll_messages, poll_timeout, quizchatid);\n};\n\nconst update_msg_area = (diff) => {\n    let new_msg = quizchat_msg.messages.slice(quizchat_msg.messages.length - diff);\n    let profimg = '';\n    let new_msg_user, new_msg_receiver, card_flavor, new_msg_el, msg_time;\n    if (0 < diff) {\n        var datesCachePromise = $.Deferred().resolve({}).promise();\n        // Search for all of the timestamp values in all of the messages in all of\n        // the days that we need to render.\n        var timestampsToFormat = new_msg.map(function(msg) {\n            return msg.timestamp;\n        });\n        if (timestampsToFormat.length) {\n            datesCachePromise = getString('strftimerecentfull', 'langconfig')\n                .then(function(format) {\n                    var requests = timestampsToFormat.map(function(timestamp) {\n                        return {\n                            timestamp: timestamp,\n                            format: format\n                        };\n                    });\n                    return UserDate.get(requests);\n                })\n                .then(function(formattedTimes) {\n                    return timestampsToFormat.reduce(function(carry, timestamp, index) {\n                        carry[timestamp] = formattedTimes[index];\n                        return carry;\n                    }, {});\n                });\n        }\n        datesCachePromise.then(function(datesCache) {\n            // Append only new messages to msg area\n            for (let i = 0; i < new_msg.length; i++) {\n                new_msg_user = quizchat_users.find(u => u.id == new_msg[i].userid);\n                //group messaging\n                if (new_msg[i].receiverid == quizchat_address_question_group) {\n                    new_msg_receiver = quizchat_users.find(u => u.id == new_msg[i].receiverid + '/' + new_msg[i].rfullname);\n                } else {\n                    new_msg_receiver = quizchat_users.find(u => u.id == new_msg[i].receiverid);\n                }\n                card_flavor = new_msg[i].userid === quizchat_userid\n                    ? 'bg-secondary'\n                    : 'bg-light border border-secondary'\n                        + (most_recent_msg_id < new_msg[i].id ? ' font-weight-bolder' : '');\n                new_msg_el = $('<div class=\"card block_quizchat_msg_el ' + card_flavor\n                + ' mb-1\" data-msg-id=\"' + new_msg[i].id + '\"></div>');\n                msg_time = new Date(new_msg[i].timestamp * 1000);\n                profimg = '<div class=\"imgcontainer\"><img class=\"rounded profileimg\" src=\"'\n                + new_msg_user.profileimageurlsmall\n                + '\" alt=\"' + new_msg_user.fullname + '\" title=\"' + new_msg_user.fullname + '\"></img></div>';\n                var formattedDate = datesCache[new_msg[i].timestamp];\n                let dateKey = formattedDate.split(',').slice(0, 2).join(',');\n                let displayDate = isToday(new_msg[i].timestamp) ? lang_strings['today'] : dateKey;\n                // Check if a div for this date already exists\n                if (!processedDates[displayDate]) {\n                    // If not, create a new div for this date\n                    let dateDiv = $('<div class=\"line-with-text\" id=\"'\n                    + displayDate + '\"><hr><span>' + displayDate + '</span><hr></div>');\n                    $('#block_quizchat_messages > .block_quizchat_msg_area_body').append(dateDiv);\n                    processedDates[displayDate] = displayDate;\n                }\n                $(new_msg_el)\n                .append(\n                    $('<div class=\"card-header\"></div>')\n                    .append(\n                        $('<div class=\"msg-header p-0\"></div>')\n                        .append(\n                            $('<div class=\"block_quizchat_user_icon\">')\n                            .append(profimg),\n                            $(\n                                '<div class=\"text-right tofrom from\">'\n                                + lang_strings['from'] + ':</div>'\n                            ),\n                            $(\n                                '<div class=\"fullname text-truncate\" data-address-type=\"from\"'\n                                + ' title=\"' + new_msg_user.fullname + '\">'\n                                + new_msg_user.fullname + '</div>'\n                            ),\n                            $(\n                                '<div class=\"timestamp text-right\">'\n                                + msg_time.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }) + '</div>'\n                            ),\n                            $(\n                                '<div class=\"text-right tofrom to\">'\n                                + lang_strings['to'] + ':</div>'\n                            ),\n                            $(\n                                '<div class=\"fullname text-truncate\" data-address-type=\"to\"'\n                                + ' title=\"' + new_msg_receiver.fullname + '\">'\n                                + new_msg_receiver.fullname + '</div>'\n                            )\n                        )\n                    ),\n                    $(\n                        '<div class=\"card-body\"><div class=\"question-info\"><b>'\n                        + lang_strings['student_question_select'] + ' ' + new_msg[i].questiontxt\n                        + new_msg[i].quizattempt +'</b></div>'\n                        + '<div class=\"msg-txt\">' + new_msg[i].message +'</div>'\n                        + '</div>'\n                    )\n                );\n\n                $('#block_quizchat_messages > .block_quizchat_msg_area_body').append(new_msg_el);\n                //trigger MathJax to render equations within the element with the class \"card-body\"\n                if (i == new_msg.length-1){\n                    cardbodyMathJax('card-body');\n                    // Scroll to bottom of msg area\n                    $('.block_quizchat_msg_area_body').scrollTop($('.block_quizchat_msg_area_body')[0].scrollHeight);\n                }\n            }\n            // Will unnotify in case drawer is open\n            update_unnotify_timeout();\n            update_message_headers();\n            update_user_select_status_indicators();\n        });\n    }\n};\n\nconst update_notification = (msg) => {\n    let total_unread_msg = int_sessionStorage('total_unread_msg');\n    if(( quizchat_userid !== msg.userid ) && ( 0 < total_unread_msg )){\n        let diff_string = total_unread_msg + ' ' +\n            (1 < total_unread_msg || 0 == total_unread_msg\n                ? lang_strings['notification_new_msg_plural']\n                : lang_strings['notification_new_msg_singular']\n            );\n        $('.toast').remove();\n        addToast(msg.message, {\n            type: 'info',\n            title: diff_string,\n            subtitle: lang_strings['from'] + ': ' + quizchat_users.find(u => u.id === msg.userid).fullname,\n            closeButton: true,\n            autohide: false,\n            delay: 10000,\n        })\n        .then(() => {\n            if (!no_drawer && !full_screen_flag) {\n                update_toast_style($('#theme_boost-drawers-blocks')[0]);\n            }\n            cardbodyMathJax('toast-wrapper');\n        });\n        $('#block_quizchat_messages > .block_quizchat_msg_area_header').text(diff_string);\n        if(!full_screen_flag)\n        {\n            $('#new_msg_icon').remove();\n            $('.drawer-toggler.drawer-right-toggle').prepend(\n                $('<img src=\"' + M.cfg.wwwroot\n                    + '/blocks/quizchat/img/icon-new-message-30.png\"'\n                    + 'id=\"new_msg_icon\" alt=\"' + diff_string + '\" title=\"' + diff_string + '\"></img>')\n            );\n        }\n    }\n};\n\nconst isToday = (date) => {\n    let today = new Date();\n    let checkDate = new Date(date * 1000);\n\n    // Reset time part to compare only dates\n    today.setHours(0, 0, 0, 0);\n    checkDate.setHours(0, 0, 0, 0);\n\n    return today.getTime() === checkDate.getTime();\n};\n\nconst unnotify = () => {\n    write_sessionStorage('total_unread_msg', 0);\n    $('.toast').remove();\n    $('.block_quizchat_msg_el.font-weight-bolder').removeClass('font-weight-bolder');\n    $('#block_quizchat_messages > .block_quizchat_msg_area_header').text('0 ' + lang_strings['notification_new_msg_plural']);\n    $('#new_msg_icon').remove();\n};\n\nconst update_toast_style = (drawer) => {\n    let toast_width = '350';\n    let button = document.querySelector('[data-toggler=\"drawers\"][data-target=\"theme_boost-drawers-blocks\"][data-action=\"toggle\"]');\n    let offset = 0;\n    // No drawers in SEB\n    if (!no_drawer) {\n        if (drawer.classList.contains('show')) {\n            offset = drawer.offsetWidth + 15;\n        } else {\n            offset = button.parentNode.offsetWidth + 15;\n        }\n    }\n    $('.toast').removeClass('mx-auto');\n    $('.toast').css({\n        'position': 'absolute',\n        'right': offset,\n        'width': toast_width,\n        'max-width': toast_width\n    });\n    // Make the small subtitle with the 'from' field truncate too long names\n    $('.toast .toast-subtitle.ml-auto.small').css({\n        'white-space': 'nowrap',\n        'max-width': '200px',\n        'overflow': 'hidden',\n        'text-overflow': 'ellipsis',\n        'text-align': 'right'\n    });\n    $('.toast .toast-message').css({\n        'white-space': 'nowrap',\n        'overflow': 'hidden',\n        'text-overflow': 'ellipsis'\n    });\n    $('.toast-wrapper').removeClass(['mx-auto', 'fixed-top']);\n    $('.toast-wrapper').css({\n        'position': 'absolute',\n        'width': toast_width,\n        'max-width': toast_width,\n        'right': '0'\n    });\n};\n\nconst create_respond_link = (userid, fullname, questionid, questiontxt) => {\n    //'#userid/questionid/questiontxt'\n    let respond_link = document.createElement('a');\n    respond_link.setAttribute('href', '#' + userid + '/' + questionid + '/' + questiontxt);\n    respond_link.append(document.createTextNode(fullname));\n    respond_link.addEventListener('click', autofill_users_select);\n    return respond_link;\n};\n\nconst update_message_headers = () => {\n    $('.block_quizchat_msg_el').each(function(i, el) {\n        let msg;\n        if(quizchat_msg.messages.length==1)\n        {\n            msg = quizchat_msg.messages[0];\n        }\n        else\n        {\n            msg = quizchat_msg.messages.find(m => m.id === parseInt(el.getAttribute('data-msg-id')));\n        }\n        let msg_user = quizchat_users.find(u => u.id === msg.userid);\n        // Add or remove respond link depending on user state\n        if (msg.userid !== quizchat_userid) {\n            let fullname_th = $('div.fullname[data-address-type=\"from\"]', $(el));\n            fullname_th.empty();\n            if (enrolled_states.includes(msg_user.state)) {\n                fullname_th.removeClass('fullname_suspended');\n                if (Instructor.is_teacher) {\n                    let $questionlinkobj = $(msg.questiontxt);\n                    // Extract the text inside the <a> tag\n                    let questiontxt = $questionlinkobj.text();\n                    fullname_th.html(create_respond_link(msg.userid, msg_user.fullname, msg.questionid, questiontxt));\n                } else {\n                    fullname_th.text(msg_user.fullname);\n                }\n            } else {\n                if (['suspended', 'deleted', 'unenrolled'].includes(msg_user.state)) {\n                    fullname_th.addClass('fullname_suspended');\n                }\n                fullname_th.text(msg_user.fullname);\n            }\n        }\n        if (Instructor.is_teacher) {\n            // Insert state indicator where necessary\n            // (user is instructor and indicator is not yet there)\n            if ( $('div.imgcontainer div.statecircle-base', $(el)).length <= 0 ) {\n                $('div.imgcontainer', $(el)).append('<div class=\"statecircle-base\"></div>');\n            }\n            // Update state indicator depending on user state\n            let state_indicator = $('div.imgcontainer div.statecircle-base', $(el));\n            state_indicator.attr('title', lang_strings[msg_user.state]);\n            state_indicator.removeClass();\n            state_indicator.addClass('statecircle-base ' + msg_user.state);\n        }\n    });\n};\n\n// Callback for mutations in drawer class list\nconst drawer_mutation_callback = (mutation) => {\n    $('.block_quizchat_msg_area_body').scrollTop($('.block_quizchat_msg_area_body')[0].scrollHeight);\n    update_unnotify_timeout();\n    update_toast_style(mutation[0].target);\n};\n\n// separate function for this so it is callable from other functions\nconst update_unnotify_timeout = () => {\n    if(!full_screen_flag) {\n        if (no_drawer || $('#theme_boost-drawers-blocks')[0].classList.contains('show')) {\n            unnotify_timeout_id = setTimeout(unnotify, unnotify_timeout);\n        } else {\n            clearTimeout(unnotify_timeout_id);\n        }\n    } else {\n        unnotify_timeout_id = setTimeout(unnotify, unnotify_timeout);\n    }\n};\n\n// setting_poll_timeout to be set in settings.php / admin interface\nexport const init = (arg_quizchat,arg_userid, setting_poll_timeout, setting_unnotify_timeout, no_drawer_flag,\n     langstr_obj, fullscreen_flag) => {\n    // The backend has checked for additional browser security\n    // or a SEB config on this quiz\n    no_drawer = no_drawer_flag;\n    full_screen_flag = fullscreen_flag;\n    // User Id is needed for client to ignore their own messages when\n    // Updating notification\n    quizchat_userid = arg_userid;\n    lang_strings = { ...langstr_obj };\n    // Initialize the quizchat_users array\n    init_quizchat_users();\n    const drawer_blocks = $('#theme_boost-drawers-blocks');\n    const obs_config = { attributes: true, attributeFilter: [\"class\"] };\n    const drawer_blocks_observer = new MutationObserver(drawer_mutation_callback);\n    // Having been checked on the server side, these timeouts are safe\n    poll_timeout = setting_poll_timeout * 1000;\n    unnotify_timeout = setting_unnotify_timeout * 1000;\n    // Drawers do not exist in SEB\n    if (!no_drawer && !full_screen_flag) {\n        drawer_blocks_observer.observe(drawer_blocks[0], obs_config);\n    }\n    quizchatid = arg_quizchat.id;\n    poll_messages(quizchatid);\n};\n\n"],"names":["poll_timeout_id","unnotify_timeout","unnotify_timeout_id","poll_timeout","quizchatid","quizchat_userid","processedDates","quizchat_msg","quizchat_users","push_quizchat_users","users","new_users","filter","u","i","findIndex","qc_u","id","quizchat_address_everyone","quizchat_address_instructors","includes","state","push","enrolled_states","page_reloaded","most_recent_msg_id","lang_strings","full_screen_flag","no_drawer","clearTimeout","poll_messages","int_sessionStorage","key","val","sessionStorage","getItem","parseInt","write_sessionStorage","setItem","followUp","data","stats","msg_total","total_unread_msg","diff","messages","msg","length","userid","update_msg_area","update_notification","update_message_headers","calls","methodname","args","then","sort","a","b","timestamp","userdata","usersMap","Map","forEach","message","has","set","lastname","firstname","fullname","profileimageurlsmall","picture","receiverid","rlastname","rfirstname","rfullname","Array","from","values","setTimeout","new_msg_user","new_msg_receiver","card_flavor","new_msg_el","msg_time","new_msg","slice","profimg","datesCachePromise","$","Deferred","resolve","promise","timestampsToFormat","map","format","requests","UserDate","get","formattedTimes","reduce","carry","index","datesCache","find","Date","dateKey","split","join","displayDate","isToday","dateDiv","append","toLocaleTimeString","hour","minute","questiontxt","quizattempt","scrollTop","scrollHeight","update_unnotify_timeout","diff_string","remove","type","title","subtitle","closeButton","autohide","delay","update_toast_style","text","prepend","M","cfg","wwwroot","date","today","checkDate","setHours","getTime","unnotify","removeClass","drawer","button","document","querySelector","offset","classList","contains","offsetWidth","parentNode","css","each","el","m","getAttribute","msg_user","fullname_th","empty","Instructor","is_teacher","html","questionid","respond_link","createElement","setAttribute","createTextNode","addEventListener","autofill_users_select","create_respond_link","addClass","state_indicator","attr","drawer_mutation_callback","mutation","target","arg_quizchat","arg_userid","setting_poll_timeout","setting_unnotify_timeout","no_drawer_flag","langstr_obj","fullscreen_flag","isArray","init_quizchat_users","drawer_blocks","obs_config","attributes","attributeFilter","drawer_blocks_observer","MutationObserver","observe"],"mappings":"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"}