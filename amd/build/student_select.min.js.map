{"version":3,"file":"student_select.min.js","sources":["../src/student_select.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Notification from 'core/notification';\nimport {call as fetchMany} from 'core/ajax';\nimport $ from 'jquery';\n import {\n     push_quizchat_users,\n     lang_strings\n } from 'block_quizchat/master';\n\n //let first_element_txt;\n //let first_element_value;\n let promise;\n\nexport const list = (quizid, everyonetxt, generaltxt, grouptxt, query) => {\n    let selected_question = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"]');\n    let question_id = -1; // no selected question\n    if(selected_question) {\n        question_id = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n    }\n    promise = fetchMany([{\n        methodname: 'block_quizchat_get_users',\n        args: {\n            quizid: quizid,\n            everyonetxt: everyonetxt,\n            partial_name: query,\n            questionid: parseInt(question_id),\n            general_txt: generaltxt,\n            group_txt: grouptxt\n        }\n    }]);\n    return promise[0];\n};\n\nexport const processResults = (selector, results) => {\n    var options = [];\n    push_quizchat_users(results);\n    $.each(results, function(index, data) {\n            let state = '';\n            let statetag = '';\n            if (data.state !== ''){\n                state = lang_strings[data.state];\n                statetag = '<div class=\"statecircle-base-menu ' + data.state + '\" title = \"' + state + '\"></div>';\n            }\n            let name = data.lastname;\n            if(data.firstname!=='') {\n                name += ', ' + data.firstname;\n            }\n            let nametag='<div class=\"participant-name-menu\" title=\"' + name + '\">' + name + '</div>';\n            let container = document.createElement(\"div\");\n            container.innerHTML = statetag + nametag;\n            container.className = 'divcontainer';\n            options.push({\n                value: data.id,\n                label: container,\n                selected: (data.id == '0' || data.id == '-2') ? true : false,\n            });\n            /* if(data.id == '0' || data.id == '-2') {\n                first_element_txt = name;\n                first_element_value = data.id;\n            } */\n            //$('#block_quizchat_instructor_form ul.form-autocomplete-suggestions li:first-child').trigger('click');\n            //$('#block_quizchat_instructor_form span[role=\"option\"]').contents().last().replaceWith(first_element_txt);\n            //$('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value', first_element_value);\n    });\n    return options;\n};\n\nexport const transport = (selector, query, callback) => {\n    let quizid = $('[name=\"block_quizchat_quizid\"]').val();\n    let everyonetxt = $('[name=\"block_quizchat_langtxt_everyone\"]').val();\n    let generaltxt = $('[name=\"block_quizchat_general\"]').val();\n    let grouptxt = $('[name=\"block_quizchat_grouptxt\"]').val();\n    list(quizid, everyonetxt, generaltxt, grouptxt, query)\n        .then(callback)\n        .catch(Notification.exception);\n    //alert(list_data);\n    /* let group_string = lang_strings['group_txt']; //start here monday replace the old selection with the new one\n    let everyone_string = lang_strings['everyone'];\n    let questionid = 0;//general question\n    if(\"\" === $('#fitem_id_block_quizchat_questions_select option:selected')[0].value){\n        // If a selection has been made and the search input gets focused and blurred again\n        // without making a different selection the select element will have an empty\n        // selected options property with no receiverid at all\n        // => get selected option from span[role=\"option\"]\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n    } else {\n        // The select element is ok, just get the value\n        questionid = $('#id_block_quizchat_questions_select').val();\n    }\n    if(questionid == 0) {//general question\n        //select everyone in participants\n        remove_divcontainer_ifexists();\n        $('#block_quizchat_instructor_form span[role=\"option\"]').contents().last().replaceWith(everyone_string);\n        $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value', quizchat_address_everyone);\n    }\n    else {//question selected\n        //select question group in participants\n        let gname = $('#block_quizchat_questions_form span[role=\"option\"] div.divcontainer-questions').attr('title');\n        remove_divcontainer_ifexists();\n        $('#block_quizchat_instructor_form span[role=\"option\"]').contents().last().replaceWith(group_string + ' ' + gname);\n        $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value', quizchat_address_question_group);\n    } */\n};\n"],"names":["promise","list","quizid","everyonetxt","generaltxt","grouptxt","query","question_id","document","querySelector","dataset","value","methodname","args","partial_name","questionid","parseInt","general_txt","group_txt","selector","results","options","each","index","data","state","statetag","lang_strings","name","lastname","firstname","nametag","container","createElement","innerHTML","className","push","id","label","selected","callback","val","then","catch","Notification","exception"],"mappings":";;;;;;;;IAgCKA,s2BAEQC,KAAO,CAACC,OAAQC,YAAaC,WAAYC,SAAUC,aAExDC,aAAe,SADKC,SAASC,cAAc,mEAG3CF,aAAc,mBAAE,iEAAiE,GAAGG,QAAQC,OAEhGX,SAAU,cAAU,CAAC,CACjBY,WAAY,2BACZC,KAAM,CACFX,OAAQA,OACRC,YAAaA,YACbW,aAAcR,MACdS,WAAYC,SAAST,aACrBU,YAAab,WACbc,UAAWb,aAGZL,QAAQ,+CAGW,CAACmB,SAAUC,eACjCC,QAAU,yCACMD,yBAClBE,KAAKF,SAAS,SAASG,MAAOC,UACpBC,MAAQ,GACRC,SAAW,GACI,KAAfF,KAAKC,QACLA,MAAQE,qBAAaH,KAAKC,OAC1BC,SAAW,qCAAuCF,KAAKC,MAAQ,cAAgBA,MAAQ,gBAEvFG,KAAOJ,KAAKK,SACI,KAAjBL,KAAKM,YACJF,MAAQ,KAAOJ,KAAKM,eAEpBC,QAAQ,6CAA+CH,KAAO,KAAOA,KAAO,SAC5EI,UAAYxB,SAASyB,cAAc,OACvCD,UAAUE,UAAYR,SAAWK,QACjCC,UAAUG,UAAY,eACtBd,QAAQe,KAAK,CACTzB,MAAOa,KAAKa,GACZC,MAAON,UACPO,SAAsB,KAAXf,KAAKa,IAAwB,MAAXb,KAAKa,QAUvChB,4BAGc,CAACF,SAAUb,MAAOkC,gBACnCtC,QAAS,mBAAE,kCAAkCuC,MAC7CtC,aAAc,mBAAE,4CAA4CsC,MAC5DrC,YAAa,mBAAE,mCAAmCqC,MAClDpC,UAAW,mBAAE,oCAAoCoC,MACrDxC,KAAKC,OAAQC,YAAaC,WAAYC,SAAUC,OAC3CoC,KAAKF,UACLG,MAAMC,aAAaC"}