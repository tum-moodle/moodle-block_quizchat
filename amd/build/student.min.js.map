{"version":3,"file":"student.min.js","sources":["../src/student.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {call as fetchMany} from 'core/ajax';\nimport $ from 'jquery';\nimport {reset_poll_timeout as restart_polling} from 'block_quizchat/master';\nimport {\n    checkCharsLength as checkMsgLength,\n    resetCharsCount as updateCharsCount,\n    handleWhiteSpaceMsg as checkWhiteSpaceMsg\n} from 'block_quizchat/chars_limit';\nimport {\n    quizchat_general_question_id,\n    lang_strings,\n    write_sessionStorage\n} from 'block_quizchat/master';\n\nlet quizchatobj;\nvar msglen;\nvar requiredmsg;\nvar groups;\nlet htmlContent_questions;\nlet htmlContent_q_select;\nlet timeoutid;\nvar textinputcontrolname = '#block_quizchat_input_student_send';\nconst send_msg_to_instructor = (submit_event) => {\n    submit_event.preventDefault();\n    let whitespace_msg = checkWhiteSpaceMsg(textinputcontrolname);\n    //if white space message\n    if (whitespace_msg) {\n        let msg_text_input = document.querySelector(textinputcontrolname);\n        updateCharsCount(msglen);\n        msg_text_input.setCustomValidity(requiredmsg);\n        msg_text_input.reportValidity();\n        return -1;\n    }\n    // Check if a question selection has been made\n    if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n        // Highlight select label and prevent form submit all together\n        $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n        return -1;\n    }\n    $('#questions_required').css('display', 'none');\n    let questionattemptid = 0;//general\n    if(\"\" === $('#fitem_id_block_quizchat_questions_select option:selected')[0].value){\n        // If a selection has been made and the search input gets focused and blurred again\n        // without making a different selection the select element will have an empty\n        // selected options property with no receiverid at all\n        // => get selected option from span[role=\"option\"]\n        questionattemptid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n    } else {\n        // The select element is ok, just get the value\n        questionattemptid = $('#id_block_quizchat_questions_select').val();\n    }\n    //alert(questionattemptid);\n    $('#id_block_quizchat_questions_select_label').css({'color': '#000', 'font-weight': 'normal'});\n    $('#block_quizchat_input_student_send').prop(\"disabled\", true);\n    $('#block_quizchat_button_student_send').prop(\"disabled\", true);\n    updateCharsCount(msglen);\n    let grps_ar = Object.keys(groups).map(key => {\n        return {\n            ...groups[key]\n        };\n    });\n    let groupid = parseInt(grps_ar.find(obj => obj.name === 'teachers').id);//Send to teachers\n    const calls = [\n        {\n            methodname: 'block_quizchat_create_message',\n            args: {\n                'quizchatid': quizchatobj.id,\n                'receiverid': 0,\n                'groupid': groupid,\n                'message': $('#block_quizchat_input_student_send').val(),\n                'questionattemptid': questionattemptid,\n                'questionid' : 0\n            }\n        }\n    ];\n    fetchMany(calls)[0]\n        .then((data) => {\n            restart_polling();\n            $('#block_quizchat_input_student_send').val('');\n            resetMenu();\n            // reset questions menu after sending message\n            // $(\n            //     '#block_quizchat_questions_form ul.form-autocomplete-suggestions li[role=\"option\"][data-value=\"0\"]'\n            // ).trigger('click');\n            $('#block_quizchat_input_student_send').prop(\"disabled\", false);\n            $('#block_quizchat_button_student_send').prop(\"disabled\", false);\n            return data.id;\n        })\n        .catch(() => {\n            $('#block_quizchat_input_student_send').prop(\"disabled\", false);\n            $('#block_quizchat_button_student_send').prop(\"disabled\", false);\n        });\n};\n\nconst text_oninput = (oninput_event) => {\n    // Prevent default first\n    oninput_event.preventDefault();\n    oninput_event.target.setCustomValidity('');\n    checkMsgLength(msglen, textinputcontrolname);\n};\n\nconst text_onblur = (onblur_event) => {\n    // Prevent default first\n    onblur_event.preventDefault();\n    //if white space message\n    if (checkWhiteSpaceMsg(textinputcontrolname)) {\n        updateCharsCount(msglen);\n    }\n    // reset input validity\n    // see https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity\n    onblur_event.target.setCustomValidity('');\n};\n\nconst text_setvalidmsg = (e) => {\n    // Customize the validation message\n    e.target.setCustomValidity(requiredmsg);\n};\n\nconst add_divcontainerquestions = () => {\n    let contains_questions_div = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').find(\n        '.divcontainer-questions').length > 0;\n        if(!contains_questions_div &&\n            $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').attr('data-value')\n            == quizchat_general_question_id) {\n            $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n                // replace the existing content with HTML content\n                $(this).contents().last().replaceWith(htmlContent_questions);\n            });\n        }\n};\n\nconst setMenu = () => {\n    htmlContent_questions = '<div title=\"' + lang_strings['student_question_general']\n            + '\" class=\"divcontainer-questions\"><div class=\"questions-menu\" title=\"'\n            + lang_strings['student_question_general'] + '\">'\n            + lang_strings['student_question_general'] + '</div></div>';\n    htmlContent_q_select = $('#id_block_quizchat_questions_select').children().clone();\n    add_divcontainerquestions();\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value',quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n};\n\nconst setFormIfExist = () => {\n    let q_form = document.querySelector('#block_quizchat_questions_form ul.form-autocomplete-suggestions');\n    if (q_form) {\n        setMenu();\n        clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        timeoutid = setTimeout(setFormIfExist, 1000); // Check again after 1 second\n    }\n};\n\nconst resetMenu = () => {\n    $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n        // replace the existing content with HTML content\n        $(this).find('.divcontainer-questions').replaceWith(htmlContent_questions);\n    });\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value', quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n    $('#id_block_quizchat_questions_select').empty();\n    $('#id_block_quizchat_questions_select').append(htmlContent_q_select);\n};\n\nconst ul_callback = (mutations) => {\n    for (var mutation of mutations) {\n        if (mutation.type === 'childList') {\n            let attr = $('#block_quizchat_questions_form ul.form-autocomplete-suggestions').attr('aria-hidden');\n            if (typeof attr == 'undefined' || attr == false) {\n                 // Menu is visible, trigger deselection of the selected item\n                 $('#block_quizchat_questions_form ul.form-autocomplete-suggestions li[aria-selected=\"true\"]')\n                 .attr('aria-selected', 'false');\n            }\n        }\n    }\n};\n\nexport const init_student = (arg_quizchat, confingsetting_msglen, reqmsg, receivergroups) => {\n    import('block_quizchat/master').then(() => {\n        quizchatobj = arg_quizchat;\n        msglen = confingsetting_msglen;\n        requiredmsg = reqmsg;\n        groups = receivergroups;\n        $('#block_quizchat_student_send').submit(send_msg_to_instructor);\n        $('#id_block_quizchat_questions_select').change(() => {\n            // Reset style of select label on correct selection\n            $('#id_block_quizchat_questions_select_label').css({'color': '#000', 'font-weight': 'normal'});\n        });\n        $(textinputcontrolname).on('input', text_oninput);\n        $(textinputcontrolname).on('blur', text_onblur);\n        $(textinputcontrolname).on('invalid', text_setvalidmsg);\n        setFormIfExist();\n        write_sessionStorage('selected_user_or_question_id', \"-2\");\n        let targetnode = $('#block_quizchat_questions_form');\n        if(typeof targetnode[0] !== 'undefined') {\n            let ul_config = {childList: true, subtree: true};\n            let ul_observer = new MutationObserver(ul_callback);\n            ul_observer.observe(targetnode[0], ul_config);\n        }\n    });\n};\n"],"names":["quizchatobj","msglen","requiredmsg","groups","htmlContent_questions","htmlContent_q_select","timeoutid","textinputcontrolname","send_msg_to_instructor","submit_event","preventDefault","msg_text_input","document","querySelector","setCustomValidity","reportValidity","length","css","questionattemptid","value","dataset","val","prop","grps_ar","Object","keys","map","key","groupid","parseInt","find","obj","name","id","calls","methodname","args","then","data","resetMenu","catch","text_oninput","oninput_event","target","text_onblur","onblur_event","text_setvalidmsg","e","add_divcontainerquestions","attr","quizchat_general_question_id","each","this","contents","last","replaceWith","setFormIfExist","lang_strings","children","clone","parent","clearTimeout","setTimeout","empty","append","ul_callback","mutations","mutation","type","arg_quizchat","confingsetting_msglen","reqmsg","receivergroups","submit","change","on","targetnode","ul_config","childList","subtree","MutationObserver","observe"],"mappings":"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"}