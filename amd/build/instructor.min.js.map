{"version":3,"file":"instructor.min.js","sources":["../src/instructor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {call as fetchMany} from 'core/ajax';\nimport $ from 'jquery';\nimport {reset_poll_timeout as restart_polling} from 'block_quizchat/master';\nimport {\n        quizchat_address_everyone,\n        quizchat_address_question_group,\n        quizchat_general_question_id,\n        quizchat_users,\n        lang_strings\n    } from 'block_quizchat/master';\nimport {\n    checkCharsLength as checkMsgLength,\n    resetCharsCount as updateCharsCount,\n    handleWhiteSpaceMsg as checkWhiteSpaceMsg\n} from 'block_quizchat/chars_limit';\n\nlet quizchatobj;\nvar msglen;\nvar requiredmsg;\nvar textinputcontrolname = '#block_quizchat_input_instructor_send';\nvar groupid = 0;//in case one to one message\nvar groups;\nlet timeoutid;\nlet htmlContent_participants;\nlet htmlContent_questions;\nlet htmlContent_q_select;\nlet htmlContent_p_select;\nlet noparticipant_flag = false;\nexport var is_teacher = false;\n\nconst send_msg = (submit_event) => {\n    // Prevent default first\n    submit_event.preventDefault();\n    //if white space message\n    if (checkWhiteSpaceMsg(textinputcontrolname))\n    {\n        let msg_text_input = document.querySelector(textinputcontrolname);\n        updateCharsCount(msglen);\n        msg_text_input.setCustomValidity(requiredmsg);\n        msg_text_input.reportValidity();\n        return -1;\n    }\n    // Check if a recipient selection has been made\n    if(0 === $('#fitem_id_block_quizchat_users_select .form-autocomplete-selection [role=\"option\"]').length){\n        // Highlight select label and prevent form submit all together\n        $('#fitem_id_block_quizchat_users_select label').css({'color': '#f00', 'font-weight': '600'});\n        // Check if a question selection has been made\n        if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n            // Highlight select label and prevent form submit all together\n            $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n        }\n        else {\n            $('#fitem_id_block_quizchat_questions_select label').css({'color': '#000', 'font-weight': 'normal'});\n        }\n        return -1;\n    }\n    let receiverid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n    if(parseInt(receiverid) == quizchat_address_question_group) {\n        //in case question group receiver id- make receiverid 0 and save question id\n        receiverid = 0;\n    }\n    // Check if a question selection has been made\n    if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n        // Highlight select label and prevent form submit all together\n        $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n        return -1;\n    }\n    $('#questions_required').css('display', 'none');\n    //let general_string = lang_strings['student_question_general'];\n    let questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n    let grps_ar=Object.keys(groups).map(key => {\n        return {\n          ...groups[key]\n        };\n      });\n    if (parseInt(receiverid) == quizchat_address_everyone)\n    {\n        if(parseInt($('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value)\n        == quizchat_address_question_group && parseInt(questionid) != quizchat_general_question_id) {\n            groupid = 0;//In case one to one message or group question message\n        }\n        else {\n            groupid = parseInt(grps_ar.find(obj => obj.name === 'all').id);//send to all\n        }\n    }\n    else\n    {\n        groupid = 0;//In case one to one message or group question message\n    }\n    $('#id_block_quizchat_users_select_label').css({'color': '#000', 'font-weight': 'normal'});\n    $('#fitem_id_block_quizchat_users_select input[type=\"text\"]').css({'color': '#000', 'font-weight': 'normal'});\n    $('#block_quizchat_input_instructor_send').prop(\"disabled\", true);\n    $('#block_quizchat_button_instructor_send').prop(\"disabled\", true);\n    updateCharsCount(msglen);\n    const calls = [\n        {\n            methodname: 'block_quizchat_create_message',\n            args: {\n                'quizchatid': quizchatobj.id,\n                'receiverid': parseInt(receiverid),\n                'groupid': groupid,\n                'message': $('#block_quizchat_input_instructor_send').val(),\n                'questionattemptid': 0,\n                'questionid' : parseInt(questionid)\n            }\n        }\n    ];\n    fetchMany(calls)[0]\n    .then( (data) => {\n        restart_polling();\n        $('#block_quizchat_input_instructor_send').val('');\n        resetMenus();\n        $('#block_quizchat_input_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_button_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_input_instructor_send').trigger('focus');\n        return data.id;\n    })\n    .catch(() => {\n        $('#block_quizchat_input_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_button_instructor_send').prop(\"disabled\", false);\n    });\n};\n\nconst text_oninput = (oninput_event) => {\n    // Prevent default first\n    oninput_event.preventDefault();\n    checkMsgLength(msglen , textinputcontrolname);\n    oninput_event.target.setCustomValidity('');\n};\n\nconst text_onblur = (onblur_event) => {\n    // Prevent default first\n    onblur_event.preventDefault();\n    //if white space message\n    if (checkWhiteSpaceMsg(textinputcontrolname))\n    {\n        updateCharsCount(msglen);\n    }\n    onblur_event.target.setCustomValidity('');\n};\n\nconst get_user_state = (userid) => {\n    let user = quizchat_users.find(u => u.id === userid);\n    return user.state;\n};\n\nexport const autofill_users_select = (event) => {\n    event.preventDefault();\n    // hrefs be like '#userid/questionid/questiontxt'\n    const [userid, questionid, questiontxt] = event.target.getAttribute('href').slice(1).split('/');\n    $('#id_block_quizchat_enableflag').attr('value', 0);\n    resetMenus_click_respond(userid, questionid, questiontxt);\n    update_user_select_status_indicators();\n    event.target.blur();\n};\n\nexport const update_user_select_status_indicators = () => {\n    $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions li[role=\"option\"]').each(function(i, el) {\n        let userid = parseInt(el.getAttribute('data-value'));\n        if(isNaN(userid)) {\n            // ignore empty first entry of list\n            return;\n        }\n        let userstate = get_user_state(userid);\n        let status_indicator_el = $('div.statecircle-base-menu', $(el));\n        status_indicator_el.removeClass();\n        status_indicator_el.addClass('statecircle-base-menu ' + userstate);\n        status_indicator_el.attr('title', lang_strings[userstate]);\n    });\n    let chosen_option_span = $('#block_quizchat_instructor_form span[role=\"option\"]');\n    if(0 >= chosen_option_span.length) {\n        // First time there may be no such element\n        return;\n    }\n    let chosen_userid = parseInt(chosen_option_span.attr('data-value'));\n    let chosen_user_state = get_user_state(chosen_userid);\n    let chosen_status_indicator = $('div.statecircle-base-menu', chosen_option_span);\n    chosen_status_indicator.removeClass();\n    chosen_status_indicator.addClass('statecircle-base-menu ' + chosen_user_state);\n    chosen_status_indicator.attr('title', lang_strings[chosen_user_state]);\n};\n\nconst text_setvalidmsg = (e) => {\n    // Customize the validation message\n    e.target.setCustomValidity(requiredmsg);\n};\n\nconst users_select_change = () => {\n    let enableflag= $('#id_block_quizchat_enableflag').attr('value');\n    if(enableflag == 0)\n    {\n        $('#id_block_quizchat_enableflag').attr('value', 1);\n    }\n};\n\nconst questions_select_change = () => {//onchange_event\n    let enableflag= $('#id_block_quizchat_enableflag').attr('value');\n    if(enableflag == 1)\n    {\n    // Reset style of select label on correct selection\n    $('#id_block_quizchat_questions_select_label').css({'color': '#000', 'font-weight': 'normal'});\n    let group_string = lang_strings['group_txt'];\n    let everyone_string = lang_strings['everyone'];\n    let questionid;\n    let participantid;\n    // => get selected option from span[role=\"option\"]\n    let selected_question = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"]');\n    let selected_participant = document.querySelector('#fitem_id_block_quizchat_users_select span[role=\"option\"]');\n    if(selected_question)\n    {\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n        if (selected_participant) {\n            participantid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n            if(questionid == String(quizchat_general_question_id)) {//general question 0\n                if(participantid != String(quizchat_address_everyone)) {\n                    if($('#block_quizchat_instructor_form li[data-value=\"'+ quizchat_address_everyone + '\"]').length == 0){\n                        //remove the selected participant\n                        $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                        //select everyone in participants\n                        checkIfElementExists(\n                            '#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ everyone_string +'\"]'\n                        );\n                    }\n                    else {\n                        $('#block_quizchat_instructor_form li[data-value=\"'+ quizchat_address_everyone + '\"]').trigger('click');\n                    }\n                }\n            }\n            else {//question selected (not general) and there is selected participant\n                //select question group in participants\n                let gname = $('#block_quizchat_questions_form span[role=\"option\"] div.divcontainer-questions').attr('title');\n                let selected_participant_name = $('#block_quizchat_instructor_form div.participant-name-menu').attr('title');\n                let allgrouptxt = group_string + ' ' + gname;\n                if(participantid != quizchat_address_question_group)\n                 //selected_participant_name != allgrouptxt\n                {\n                    if($('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]').length == 0){\n                        //remove the selected participant\n                        $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                        checkIfElementExists(\n                            '#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]'\n                        );\n                    }\n                    else {\n                        $('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]').trigger('click');\n                    }\n                }\n                else {\n                    if(selected_participant_name != allgrouptxt) {\n                        if($('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]').length == 0){\n                            $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                            $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                            checkIfElementExists(\n                                '#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]'\n                            );\n                        }\n                        else\n                        {\n                            $('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ allgrouptxt + '\"]')\n                            .trigger('click');\n                        }\n                    }\n                }\n            }\n        }\n        else {//there is selected question but no participant is selected\n            if(questionid == String(quizchat_general_question_id)) {//general question 0\n                //remove the selected participant\n                if($('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ everyone_string +'\"]').length == 0) {\n                    $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                    //select everyone in participants\n                    checkIfElementExists(\n                        '#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ everyone_string +'\"]'\n                    );\n                }\n                else {\n                    $('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ everyone_string +'\"]').trigger('click');\n                }\n            }\n            else {//question selected\n                //select question group in participants\n                let gname = $('#block_quizchat_questions_form span[role=\"option\"] div.divcontainer-questions').attr('title');\n                if(document.querySelector('#block_quizchat_instructor_form div.participant-name-menu[title=\"'\n                + group_string + ' ' + gname + '\"]')) {\n                    $('#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ group_string + ' ' + gname + '\"]')\n                    .trigger('click');\n                }\n                else {\n                    $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                    checkIfElementExists(\n                    '#block_quizchat_instructor_form div.participant-name-menu[title=\"'+ group_string + ' ' + gname + '\"]');\n                }\n            }\n        }\n    } else {\n        if(selected_participant) {\n            $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n        }\n    }\n}\n};\n\nconst checkIfElementExists = (element) => {\n    if(element.includes('block_quizchat_instructor_form') && noparticipant_flag) {\n        users_select_change();\n    }\n    let targetElement = document.querySelector(element);\n    if (targetElement) {\n        // The element exists in the DOM\n        $(element).trigger('click');\n        //add_divcontainerquestions();\n        clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        timeoutid =setTimeout(() => {\n            checkIfElementExists(element);\n        }, 1000); // Check again later\n    }\n};\n\nconst add_divcontainer_after_question_select = () => {\n    let targetElement = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"][data-value=\"'\n    + quizchat_general_question_id + '\"]');\n    if (targetElement) {\n        // The element exists in the DOM\n        add_divcontainerquestions();\n        //clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        setTimeout(() => {\n            add_divcontainer_after_question_select();\n        }, 150); // Check again later\n    }\n};\n\nconst setFormsIfExist = () => {\n    let q_form = document.querySelector('#block_quizchat_questions_form ul.form-autocomplete-suggestions');\n    let p_form = document.querySelector('#block_quizchat_instructor_form ul.form-autocomplete-suggestions');\n    if (q_form && p_form) {\n        setMenus();\n        clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        timeoutid = setTimeout(setFormsIfExist, 1000); // Check again after 1 second (adjust delay as needed)\n    }\n};\n\nconst resetMenus = () => {\n    $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n        // replace the existing content with HTML content\n        $(this).find('.divcontainer-questions').replaceWith(htmlContent_questions);\n    });\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value',quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').each(function() {\n        // Check if the current span contains a statecircle-base-menu and remove it\n        if ($(this).find('.statecircle-base-menu').length > 0) {\n            // Remove it\n            $(this).find('.statecircle-base-menu').remove();\n        }\n        // replace the existing content with HTML content\n        $(this).find('.divcontainer').replaceWith(htmlContent_participants);\n    });\n    $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value',quizchat_address_everyone);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_address_everyone);\n    $('#id_block_quizchat_questions_select').empty();\n    $('#id_block_quizchat_questions_select').append(htmlContent_q_select);\n    $('#id_block_quizchat_users_select').empty();\n    $('#id_block_quizchat_users_select').append(htmlContent_p_select);\n};\n\nconst resetMenus_click_respond = (pid, qid, qtxt) => {\n    let questionid;\n    let participantid;\n    let selected_question = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"]');\n    let selected_participant = document.querySelector('#fitem_id_block_quizchat_users_select span[role=\"option\"]');\n    if(selected_question)\n    {\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n        if (selected_participant) {\n            participantid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n            if(questionid == String(qid)) {//the desired question is already selected :)\n                if(participantid != String(pid)) {\n                    // change the participant menu only if the selected participant ! = the desired participant,\n                    // otherwise keep the participant\n                    if($('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]').length == 0)\n                    {\n                        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                        checkIfElementExists(\n                            '#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]'\n                        );\n                    } else {\n                        $('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]').trigger('click');\n                    }\n                }\n            }\n            else {//question selected (not the desired question) and there is selected participant\n                //remove the selected question\n                click_to_respond(qid,qtxt);\n                //todo\n                    if($('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]').length == 0)\n                    {\n                        noparticipant_flag = true;\n                        //$('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                        checkIfElementExists('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n                    }\n                    else\n                    {\n                        $('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]').trigger('click');\n                    }\n            }\n        }\n        else {//there is selected question but no participant is selected\n            if(questionid == String(qid)) {//the desired question is already selected :)\n                //select the desired person in participants\n                checkIfElementExists(\n                    '#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]'\n                );\n            }\n            else {//a question is selected (not the desired question) and there is no selected participant\n                click_to_respond(qid,qtxt);\n                checkIfElementExists(\n                    '#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]'\n                );\n            }\n        }\n    } else {//no selected question\n        if(selected_participant) {\n            $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n        }\n        click_to_respond(qid,qtxt);\n        checkIfElementExists(\n            '#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]'\n        );\n    }\n    if(qid == quizchat_address_everyone &&\n     $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').attr('data-value') != qid){\n        add_divcontainer_after_question_select();\n    }\n    noparticipant_flag = false;\n};\n\nconst add_divcontainerquestions = () => {\n    let contains_questions_div = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').find(\n        '.divcontainer-questions').length > 0;\n        if(!contains_questions_div &&\n            $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').attr('data-value')\n            == quizchat_general_question_id) {\n            $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n                // replace the existing content with HTML content\n                $(this).contents().last().replaceWith(htmlContent_questions);\n            });\n        }\n};\n\nconst click_to_respond = (questionid, questiontxt) => {\n    let select_list_q = $('#block_quizchat_questions_form ul.form-autocomplete-suggestions');\n    let existing_list_item_q = $('li[role=\"option\"][data-value=\"' + questionid + '\"]', select_list_q);\n    let listitem_q = '<li role=\"option\" data-value=\"' + questionid + '\"></li>';\n    let menu_select_q = $('#id_block_quizchat_questions_select');\n    let existing_option_q = $('option[value=\"' + questionid + '\"', menu_select_q);\n    let option_q = '<option value=\"' + questionid + '\"></option>';\n    let divcontainer_q = $('<div class=\"divcontainer-questions\"></div>');\n    let childdiv_q = '<div class=\"questions-menu\" title=\"' + questiontxt + '\">' + questiontxt + '</div>';\n    let li_to_click_q = '#block_quizchat_questions_form ul.form-autocomplete-suggestions li[role=\"option\"][data-value=\"'\n                    + questionid + '\"]';\n    click_to_respond_process (select_list_q, existing_list_item_q, listitem_q, menu_select_q, existing_option_q,\n        option_q, divcontainer_q, childdiv_q, li_to_click_q);\n};\n\nconst click_to_respond_process = (select_list, existing_list_item, listitem, menu_select,\n     existing_option, option, divcontainer, childdiv, li_to_click) => {\n    divcontainer.append(childdiv);\n    if(0 === existing_list_item.length) {\n        select_list.append($(listitem).append(divcontainer));\n    }\n    if(0 === existing_option.length) {\n        menu_select.append($(option).append(divcontainer));\n    }\n    $(li_to_click).trigger('click');\n};\n\nconst setMenus = () => {\n    htmlContent_participants = '<div title=\"' + lang_strings['everyone']\n    + '\" class=\"divcontainer\"><div class=\"participant-name-menu\" title=\"'\n    + lang_strings['everyone'] + '\">'\n    + lang_strings['everyone'] + '</div></div>';\n    htmlContent_questions = '<div title=\"' + lang_strings['student_question_general']\n            + '\" class=\"divcontainer-questions\"><div class=\"questions-menu\" title=\"'\n            + lang_strings['student_question_general'] + '\">'\n            + lang_strings['student_question_general'] + '</div></div>';\n    htmlContent_q_select = $('#id_block_quizchat_questions_select').children().clone();\n    htmlContent_p_select = $('#id_block_quizchat_users_select').children().clone();\n    add_divcontainerquestions();\n    $('#block_quizchat_instructor_form span[role=\"option\"]').each(function() {\n        // replace the existing content with HTML content\n        $(this).contents().last().replaceWith(htmlContent_participants);\n    });\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value',quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value',quizchat_address_everyone);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_address_everyone);\n};\n\nconst help_click = () => {\n    $('#rolepermission_link').on('click', function(event) {\n            event.preventDefault();\n            // Get the href attribute value\n            let hrefValue = $('#rolepermission_link').attr('href');\n            let newwindow = window.open(hrefValue,'rolepermission_link',\n            '_blank', 'toolbar=yes,scrollbars=yes,resizable=yes,width=600,height=600');\n            if (window.focus) {newwindow.focus();}\n        });\n    };\n\nconst fullscreen_click = (event) => {\n            event.preventDefault();\n            // Get the href attribute value\n            let hrefValue = $('.fullscreen_actionmenu_item').attr('href');\n            window.open(hrefValue, '_blank', 'toolbar=yes,scrollbars=yes,resizable=yes');\n    };\n\nconst ul_callback = (mutations) => {\n    for (var mutation of mutations) {\n        if (mutation.type === 'childList') {\n            let attr = $('#block_quizchat_questions_form ul.form-autocomplete-suggestions').attr('aria-hidden');\n            if (typeof attr == 'undefined' || attr == false) {\n                 // Menu is visible, trigger deselection of the selected item\n                 $('#block_quizchat_questions_form ul.form-autocomplete-suggestions li[aria-selected=\"true\"]')\n                 .attr('aria-selected', 'false');\n            }\n        }\n    }\n};\n\nconst ul_callback_p = (mutations) => {\n    for (var mutation of mutations) {\n        if (mutation.type === 'childList') {\n            let attr = $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions').attr('aria-hidden');\n            if (typeof attr == 'undefined' || attr == false) {\n                 // Menu is visible, trigger deselection of the selected item\n                 $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions li[aria-selected=\"true\"]')\n                 .attr('aria-selected', 'false');\n            }\n        }\n    }\n};\n\nexport const init_instructor = (arg_quizchat, confingsetting_msglen, reqmsg, receivergroups) => {\n    is_teacher = true;\n    import('block_quizchat/master').then(() => {\n        quizchatobj = arg_quizchat;\n        msglen = confingsetting_msglen;\n        requiredmsg = reqmsg;\n        groups = receivergroups;\n        $('#id_block_quizchat_users_select').change(() => {\n            // reset style of select label on correct selection\n            $('#block_quizchat_instructor_form label').css({'color': '#000', 'font-weight': 'normal'});\n        });\n        $('#id_block_quizchat_questions_select').on('change', questions_select_change);\n        $('#id_block_quizchat_users_select').on('change', users_select_change);\n        $('#id_block_quizchat_users_select').on('click', users_select_change);\n        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').on('click', users_select_change);\n        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').on('change', users_select_change);\n        $('#block_quizchat_instructor_form').submit(send_msg);\n        $('#permission-link').on('click', help_click);\n        $('.fullscreen_actionmenu_item').on('click', fullscreen_click);\n        $(textinputcontrolname).on('input',text_oninput);\n        $(textinputcontrolname).on('blur',text_onblur);\n        $(textinputcontrolname).on('invalid',text_setvalidmsg);\n        setFormsIfExist();\n        let targetNode = $('#block_quizchat_questions_form');\n        let targetNode_p = $('#block_quizchat_instructor_form');\n        let ul_config = {childList: true, subtree: true};\n        let ul_observer = new MutationObserver(ul_callback);\n        let ul_observer_participants = new MutationObserver(ul_callback_p);\n        ul_observer.observe(targetNode[0], ul_config);\n        ul_observer_participants.observe(targetNode_p[0], ul_config);\n        $('#block_quizchat_input_instructor_send').trigger('focus');\n    });\n};\n"],"names":["quizchatobj","msglen","requiredmsg","groups","textinputcontrolname","groupid","timeoutid","htmlContent_participants","htmlContent_questions","htmlContent_q_select","htmlContent_p_select","noparticipant_flag","is_teacher","send_msg","submit_event","preventDefault","msg_text_input","document","querySelector","setCustomValidity","reportValidity","length","css","receiverid","dataset","value","parseInt","quizchat_address_question_group","questionid","grps_ar","Object","keys","map","key","quizchat_address_everyone","quizchat_general_question_id","find","obj","name","id","prop","calls","methodname","args","val","then","data","resetMenus","trigger","catch","text_oninput","oninput_event","target","text_onblur","onblur_event","get_user_state","userid","quizchat_users","u","state","event","questiontxt","getAttribute","slice","split","attr","resetMenus_click_respond","update_user_select_status_indicators","blur","each","i","el","isNaN","userstate","status_indicator_el","removeClass","addClass","lang_strings","chosen_option_span","chosen_userid","chosen_user_state","chosen_status_indicator","text_setvalidmsg","e","users_select_change","questions_select_change","participantid","group_string","everyone_string","selected_question","selected_participant","String","checkIfElementExists","gname","selected_participant_name","allgrouptxt","element","includes","clearTimeout","setTimeout","add_divcontainer_after_question_select","add_divcontainerquestions","setFormsIfExist","q_form","p_form","setMenus","this","replaceWith","parent","remove","empty","append","pid","qid","qtxt","click_to_respond","contents","last","select_list_q","existing_list_item_q","listitem_q","menu_select_q","existing_option_q","option_q","divcontainer_q","click_to_respond_process","select_list","existing_list_item","listitem","menu_select","existing_option","option","divcontainer","childdiv","li_to_click","children","clone","help_click","on","hrefValue","newwindow","window","open","focus","fullscreen_click","ul_callback","mutations","mutation","type","ul_callback_p","arg_quizchat","confingsetting_msglen","reqmsg","receivergroups","change","submit","targetNode","targetNode_p","ul_config","childList","subtree","ul_observer","MutationObserver","ul_observer_participants","observe"],"mappings":"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"}