{"version":3,"file":"instructor.min.js","sources":["../src/instructor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript library for the block_quizchat plugin.\n *\n * @package\n * @copyright 2023, TUM ProLehre | Medien und Didaktik <moodle@tum.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {call as fetchMany} from 'core/ajax';\nimport $ from 'jquery';\nimport {reset_poll_timeout as restart_polling} from 'block_quizchat/master';\nimport {\n        quizchat_address_everyone,\n        quizchat_userid,\n        quizchat_address_question_group,\n        quizchat_general_question_id,\n        quizchat_users,\n        lang_strings,\n        quizchat_msg,\n        quizchat_msg_counters,\n        update_msg_area,\n        update_current_msgs_array,\n        allmsgs_id,\n        allmsgs_count_notf,\n        quizchatid,\n        isToday,\n        write_sessionStorage\n    } from 'block_quizchat/master';\nimport {\n    checkCharsLength as checkMsgLength,\n    resetCharsCount as updateCharsCount,\n    handleWhiteSpaceMsg as checkWhiteSpaceMsg\n} from 'block_quizchat/chars_limit';\nimport { full_screen_flag, int_sessionStorage } from './master';\n\nlet quizchatobj;\nvar msglen;\nvar requiredmsg;\nvar textinputcontrolname = '#block_quizchat_input_instructor_send';\nvar groupid = 0;//in case one to one message\nvar groups;\nlet timeoutid;\nlet timeoutid_private_group_btns;\nlet htmlContent_participants;\nlet htmlContent_questions;\nlet htmlContent_q_select;\nlet htmlContent_p_select;\nlet noparticipant_flag = false;\nlet li_clicked = false;\nlet grp_img_white = M.util.image_url('g/g1', 'core');\nlet grp_img_white_grey = M.cfg.wwwroot+ '/blocks/quizchat/img/g1_white_grey.png';\nexport var is_teacher = false;\n\nconst send_msg = (submit_event) => {\n    // Prevent default first\n    submit_event.preventDefault();\n    let receiverid, questionid, grps_ar;\n    //if white space message\n    if (checkWhiteSpaceMsg(textinputcontrolname))\n    {\n        let msg_text_input = document.querySelector(textinputcontrolname);\n        updateCharsCount(msglen);\n        msg_text_input.setCustomValidity(requiredmsg);\n        msg_text_input.reportValidity();\n        return -1;\n    }\n    if(!full_screen_flag ||\n        (full_screen_flag &&\n            (!$('#fitem_id_block_quizchat_questions_select').is(':hidden')\n            && !$('#fitem_id_block_quizchat_users_select').is(':hidden'))\n        )\n    ) {\n        // Check if a recipient selection has been made\n        if(0 === $('#fitem_id_block_quizchat_users_select .form-autocomplete-selection [role=\"option\"]').length){\n            // Highlight select label and prevent form submit all together\n            $('#fitem_id_block_quizchat_users_select label').css({'color': '#f00', 'font-weight': '600'});\n            // Check if a question selection has been made\n            if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n                // Highlight select label and prevent form submit all together\n                $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n            }\n            else {\n                $('#fitem_id_block_quizchat_questions_select label').css({'color': '#000', 'font-weight': 'normal'});\n            }\n            return -1;\n        }\n        receiverid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n        if(parseInt(receiverid) == quizchat_address_question_group) {\n            //in case question group receiver id- make receiverid 0 and save question id\n            receiverid = 0;\n        }\n        // Check if a question selection has been made\n        if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n            // Highlight select label and prevent form submit all together\n            $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n            return -1;\n        }\n        $('#questions_required').css('display', 'none');\n        //let general_string = lang_strings['student_question_general'];\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n        grps_ar=Object.keys(groups).map(key => {\n            return {\n              ...groups[key]\n            };\n          });\n        if (parseInt(receiverid) == quizchat_address_everyone)\n        {\n            if(parseInt($('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value)\n            == quizchat_address_question_group && parseInt(questionid) != quizchat_general_question_id) {\n                groupid = 0;//In case one to one message or group question message\n            }\n            else {\n                groupid = parseInt(grps_ar.find(obj => obj.name === 'all').id);//send to all\n            }\n        }\n        else\n        {\n            groupid = 0;//In case one to one message or group question message\n        }\n        $('#id_block_quizchat_users_select_label').css({'color': '#000', 'font-weight': 'normal'});\n        $('#fitem_id_block_quizchat_users_select input[type=\"text\"]').css({'color': '#000', 'font-weight': 'normal'});\n        $('#block_quizchat_input_instructor_send').prop(\"disabled\", true);\n        $('#block_quizchat_button_instructor_send').prop(\"disabled\", true);\n    } else {\n        //case question group conversation or everyone conversation\n        if(full_screen_flag &&\n            ($('#fitem_id_block_quizchat_questions_select').is(':hidden')\n            && $('#fitem_id_block_quizchat_users_select').is(':hidden'))\n        ) {\n            receiverid = 0;\n            questionid = $('#conv-header').data('group-id');\n            let grps_ar=Object.keys(groups).map(key => {\n                return {\n                  ...groups[key]\n                };\n              });\n            if (parseInt(questionid) == quizchat_address_everyone)\n            {\n                groupid = parseInt(grps_ar.find(obj => obj.name === 'all').id);//send to all\n                questionid = 0;\n            }\n            else\n            {\n                questionid = $('#conv-header').data('group-id');//In case question group conversation\n                groupid = 0;\n            }\n            $('#id_block_quizchat_users_select_label').css({'color': '#000', 'font-weight': 'normal'});\n            $('#fitem_id_block_quizchat_users_select input[type=\"text\"]').css({'color': '#000', 'font-weight': 'normal'});\n            $('#block_quizchat_input_instructor_send').prop(\"disabled\", true);\n            $('#block_quizchat_button_instructor_send').prop(\"disabled\", true);\n        } else if(full_screen_flag &&\n            (!$('#fitem_id_block_quizchat_questions_select').is(':hidden'))\n        ) {//case private conversation\n            // Check if a question selection has been made\n            if(0 === $('#fitem_id_block_quizchat_questions_select .form-autocomplete-selection [role=\"option\"]').length){\n                // Highlight select label and prevent form submit all together\n                $('#fitem_id_block_quizchat_questions_select label').css({'color': '#f00', 'font-weight': '600'});\n                return -1;\n            }\n            else {\n                $('#fitem_id_block_quizchat_questions_select label').css({'color': '#000', 'font-weight': 'normal'});\n            }\n            $('#questions_required').css('display', 'none');\n            receiverid = $('#conv-header').data('user-id');\n            questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n            groupid = 0;\n            $('#id_block_quizchat_users_select_label').css({'color': '#000', 'font-weight': 'normal'});\n            $('#fitem_id_block_quizchat_users_select input[type=\"text\"]').css({'color': '#000', 'font-weight': 'normal'});\n            $('#block_quizchat_input_instructor_send').prop(\"disabled\", true);\n            $('#block_quizchat_button_instructor_send').prop(\"disabled\", true);\n        }\n    }\n    updateCharsCount(msglen);\n    const calls = [\n        {\n            methodname: 'block_quizchat_create_message',\n            args: {\n                'quizchatid': quizchatobj.id,\n                'receiverid': parseInt(receiverid),\n                'groupid': groupid,\n                'message': $('#block_quizchat_input_instructor_send').val(),\n                'questionattemptid': 0,\n                'questionid' : parseInt(questionid)\n            }\n        }\n    ];\n    fetchMany(calls)[0]\n    .then( (data) => {\n        restart_polling();\n        $('#block_quizchat_input_instructor_send').val('');\n        resetMenus();\n        $('#block_quizchat_input_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_button_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_input_instructor_send').trigger('focus');\n        return data.id;\n    })\n    .catch(() => {\n        $('#block_quizchat_input_instructor_send').prop(\"disabled\", false);\n        $('#block_quizchat_button_instructor_send').prop(\"disabled\", false);\n    });\n};\n\nconst text_oninput = (oninput_event) => {\n    // Prevent default first\n    oninput_event.preventDefault();\n    checkMsgLength(msglen , textinputcontrolname);\n    oninput_event.target.setCustomValidity('');\n};\n\nconst text_onblur = (onblur_event) => {\n    // Prevent default first\n    onblur_event.preventDefault();\n    //if white space message\n    if (checkWhiteSpaceMsg(textinputcontrolname))\n    {\n        updateCharsCount(msglen);\n    }\n    onblur_event.target.setCustomValidity('');\n};\n\nconst get_user_state = (userid) => {\n    let user = quizchat_users.find(u => u.id === userid);\n    return user.state;\n};\n\nexport const autofill_users_select = (event) => {\n    event.preventDefault();\n    // hrefs be like '#userid/questionid/questiontxt'\n    const [userid, questionid, questiontxt] = event.target.getAttribute('href').slice(1).split('/');\n    //check whether menus are visible\n    if(!$('#fitem_id_block_quizchat_users_select').is(':hidden') && !$('#fitem_id_block_quizchat_questions_select').is(':hidden')) {\n        $('#id_block_quizchat_enableflag').attr('value', 0);\n        resetMenus_click_respond(userid, questionid, questiontxt);\n        update_user_select_status_indicators();\n        event.target.blur();\n    } else {\n        //check whether a conversation already exists, then click it\n        let traget_conv_id = 'side-menu-conv-link-user-' + userid;\n        let target_conv_el = $('#'+traget_conv_id);\n        if(typeof target_conv_el.html() != 'undefined') {\n            target_conv_el.trigger('click');\n            resetMenus();\n            resetMenus_click_respond(userid, questionid, questiontxt);\n            update_user_select_status_indicators();\n            event.target.blur();\n        } else {\n            //if there is no conversation, create a new one\n            write_sessionStorage('selected_user_or_question_id', userid);\n            write_sessionStorage('grp_flag', false);\n            update_conversation_header(userid,false);\n            $('#block_quizchat_messages > .block_quizchat_msg_area_body').empty();\n            resetMenus();\n            resetMenus_click_respond(userid, questionid, questiontxt);\n            toggle_autocomplete(true, $('#fitem_id_block_quizchat_questions_select'));\n            toggle_autocomplete(false, $('#fitem_id_block_quizchat_users_select'));\n            write_sessionStorage('total_unread_msg_usr_qs', 0);\n            let filteredMessages = [];\n            update_current_msgs_array(filteredMessages);\n            let key = 'newmsgscount_userid_'+ userid;\n            write_sessionStorage('latest_msg_id_usr_qs', 0);\n            write_sessionStorage(key, '0');\n            //newmsgs_count_notf(userid,false);\n            update_user_select_status_indicators();\n            event.target.blur();\n        }\n    }\n};\n\nexport const update_user_select_status_indicators = () => {\n    $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions li[role=\"option\"]').each(function(i, el) {\n        let userid = parseInt(el.getAttribute('data-value'));\n        if(isNaN(userid)) {\n            // ignore empty first entry of list\n            return;\n        }\n        let userstate = get_user_state(userid);\n        let status_indicator_el = $('div.statecircle-base-menu', $(el));\n        status_indicator_el.removeClass();\n        status_indicator_el.addClass('statecircle-base-menu ' + userstate);\n        status_indicator_el.attr('title', lang_strings[userstate]);\n    });\n    let chosen_option_span = $('#block_quizchat_instructor_form span[role=\"option\"]');\n    if(0 >= chosen_option_span.length) {\n        // First time there may be no such element\n        return;\n    }\n    let chosen_userid = parseInt(chosen_option_span.attr('data-value'));\n    let chosen_user_state = get_user_state(chosen_userid);\n    let chosen_status_indicator = $('div.statecircle-base-menu', chosen_option_span);\n    chosen_status_indicator.removeClass();\n    chosen_status_indicator.addClass('statecircle-base-menu ' + chosen_user_state);\n    chosen_status_indicator.attr('title', lang_strings[chosen_user_state]);\n};\n\nconst text_setvalidmsg = (e) => {\n    // Customize the validation message\n    e.target.setCustomValidity(requiredmsg);\n};\n\nconst users_select_change = () => {\n    let enableflag= $('#id_block_quizchat_enableflag').attr('value');\n    if(enableflag == 0)\n    {\n        $('#id_block_quizchat_enableflag').attr('value', 1);\n    }\n};\n\nconst questions_select_change = () => {//onchange_event\n    let enableflag= $('#id_block_quizchat_enableflag').attr('value');\n    if((!$('#fitem_id_block_quizchat_users_select').is(':hidden') && full_screen_flag) || !full_screen_flag) {\n    if(enableflag == 1 )\n    {\n    // Reset style of select label on correct selection\n    $('#id_block_quizchat_questions_select_label').css({'color': '#000', 'font-weight': 'normal'});\n    let group_string = lang_strings['group_txt'];\n    //let everyone_string = lang_strings['everyone'];\n    let questionid;\n    let participantid;\n    // => get selected option from span[role=\"option\"]\n    let selected_question = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"]');\n    let selected_participant = document.querySelector('#fitem_id_block_quizchat_users_select span[role=\"option\"]');\n    if(selected_question)\n    {\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n        if (selected_participant) {\n            participantid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n            if(questionid == String(quizchat_general_question_id)) {//general question 0\n                if(participantid != String(quizchat_address_everyone)) {\n                    //remove the selected participant\n                    $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                    $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                    //select everyone in participants\n                    observeForElement('#block_quizchat_instructor_form li');\n                }\n            }\n            else {//question selected (not general) and there is selected participant\n                //select question group in participants\n                let gname = $('#block_quizchat_questions_form span[role=\"option\"] div.divcontainer-questions').attr('title');\n                let selected_participant_name = $('#block_quizchat_instructor_form div.participant-name-menu').attr('title');\n                let allgrouptxt = group_string + ' ' + gname;\n                if(participantid != quizchat_address_question_group)\n                 //selected_participant_name != allgrouptxt\n                {\n                    //remove the selected participant\n                    $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                    $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                    observeForElement('#block_quizchat_instructor_form li');\n                }\n                else {\n                    if(selected_participant_name != allgrouptxt) {\n                        $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n                        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                        observeForElement('#block_quizchat_instructor_form li');\n                    }\n                }\n            }\n        }\n        else {//there is selected question but no participant is selected\n            if(questionid == String(quizchat_general_question_id)) {//general question 0\n                //remove the selected participant\n                $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                observeForElement('#block_quizchat_instructor_form li');\n            }\n            else {//question selected\n                //select question group in participants\n                $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                observeForElement('#block_quizchat_instructor_form li');\n            }\n        }\n    } else {\n        if(selected_participant) {\n            $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n        }\n    }\n} }\n};\n\nconst observeForElement = (elementSelector) => {\n    const callback = (mutationsList, observer) => {\n        for (const mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n                let targetElement = document.querySelector(elementSelector);\n                if (targetElement) {\n                    // Element found, perform actions\n                    if (elementSelector.includes('block_quizchat_instructor_form') && noparticipant_flag) {\n                        users_select_change();\n                    }\n                    if(elementSelector.includes('li')) {\n                        if($(elementSelector).closest('ul').css('display') !== 'none') {\n                            // if(elementSelector.includes('block_quizchat_instructor_form li[data-value')) {\n                            //     li_clicked = true;\n                            // }\n                            if($(elementSelector.includes('block_quizchat_instructor_form li[data-value'))) {\n                                li_clicked = true;\n                            }\n                            $(elementSelector).first().attr('aria-selected', 'true');\n                            $(elementSelector).first().trigger('click');\n                            // add_divcontainerquestions();\n                            // Stop observing since the element is found\n                            observer.disconnect();\n                            // if(($('#fitem_id_block_quizchat_users_select span[role=\"option\"]').attr('data-value') == pid)&&\n                            // elementSelector.includes('block_quizchat_instructor_form')) {\n                            //     li_clicked = false;\n                            // }\n                            break;\n                        }\n                    }\n                    else {\n                        $(elementSelector).trigger('click');\n                        // add_divcontainerquestions();\n                        // Stop observing since the element is found\n                        observer.disconnect();\n                        break;\n                    }\n                }\n            }\n        }\n    };\n\n    // Create a new MutationObserver instance\n    const observer = new MutationObserver(callback);\n\n    // Start observing the DOM\n    observer.observe(document.body, {\n        childList: true, // Listen for added/removed child nodes\n        subtree: true    // Observe the entire subtree of the body\n    });\n};\n\nconst add_divcontainer_after_question_select = () => {\n    let targetElement = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"][data-value=\"'\n    + quizchat_general_question_id + '\"]');\n    if (targetElement) {\n        // The element exists in the DOM\n        add_divcontainerquestions();\n        //clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        setTimeout(() => {\n            add_divcontainer_after_question_select();\n        }, 150); // Check again later\n    }\n};\n\nconst setFormsIfExist = () => {\n    let q_form = document.querySelector('#block_quizchat_questions_form ul.form-autocomplete-suggestions');\n    let p_form = document.querySelector('#block_quizchat_instructor_form ul.form-autocomplete-suggestions');\n    if (q_form && p_form) {\n        setMenus();\n        clearTimeout(timeoutid);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        timeoutid = setTimeout(setFormsIfExist, 1000); // Check again after 1 second\n    }\n};\n\nconst click_private_group_btns = () => {\n    if (quizchat_msg.messages.length > 0) {\n        $('#allmsgs_link').trigger(\"click\");\n        $('#btn_msg_me').trigger(\"click\");\n        $('#btn_msg_all').trigger(\"click\");\n        clearTimeout(timeoutid_private_group_btns);\n    } else {\n        // The element is not yet rendered\n        // Schedule another check after a delay\n        // Check again after 1 second\n        if(!$('.header-container').html().trim()) {\n            update_conversation_header(allmsgs_id,false);\n        }\n        timeoutid_private_group_btns = setTimeout(click_private_group_btns, 1000);\n    }\n};\n\nconst resetMenus = () => {\n    $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n        // replace the existing content with HTML content\n        $(this).find('.divcontainer-questions').replaceWith(htmlContent_questions);\n    });\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value',quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').each(function() {\n        // Check if the current span contains a statecircle-base-menu and remove it\n        if ($(this).find('.statecircle-base-menu').length > 0) {\n            // Remove it\n            $(this).find('.statecircle-base-menu').remove();\n        }\n        // replace the existing content with HTML content\n        $(this).find('.divcontainer').replaceWith(htmlContent_participants);\n    });\n    $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value',quizchat_address_everyone);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_address_everyone);\n    $('#id_block_quizchat_questions_select').empty();\n    $('#id_block_quizchat_questions_select').append(htmlContent_q_select);\n    $('#id_block_quizchat_users_select').empty();\n    $('#id_block_quizchat_users_select').append(htmlContent_p_select);\n};\n\nconst resetMenus_click_respond = (pid, qid, qtxt) => {\n    let questionid;\n    let participantid;\n    let selected_question = document.querySelector('#fitem_id_block_quizchat_questions_select span[role=\"option\"]');\n    let selected_participant = document.querySelector('#fitem_id_block_quizchat_users_select span[role=\"option\"]');\n    if(selected_question)\n    {\n        questionid = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0].dataset.value;\n        if (selected_participant) {\n            participantid = $('#fitem_id_block_quizchat_users_select span[role=\"option\"]')[0].dataset.value;\n            if(questionid == String(qid)) {//the desired question is already selected :)\n                if(participantid != String(pid)) {\n                    // allow_active_li = true;\n                    $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                    observeForElement('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n                }\n            }\n            else {//question selected (not the desired question) and there is selected participant\n                //remove the selected question\n                click_to_respond(qid,qtxt);\n                noparticipant_flag = true;\n                $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                observeForElement('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n            }\n        }\n        else {//there is selected question but no participant is selected\n            if(questionid == String(qid)) {//the desired question is already selected :)\n                //select the desired person in participants\n                // allow_active_li = true;\n                $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                observeForElement('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n            }\n            else {//a question is selected (not the desired question) and there is no selected participant\n                click_to_respond(qid,qtxt);\n                // allow_active_li = true;\n                $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n                observeForElement('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n            }\n        }\n    } else {//no selected question\n        if(selected_participant) {\n            $('#block_quizchat_instructor_form span[aria-hidden=\"true\"]:contains(\"× \")').trigger('click');\n        }\n        click_to_respond(qid,qtxt);\n        // allow_active_li = true;\n        //$('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n        //observeForElement('#block_quizchat_instructor_form li[data-value=\"'+ pid + '\"]');\n        waitForElement('#fitem_id_block_quizchat_questions_select span[role=\"option\"]', () => {\n            observeSelectedQuestion(qid, pid);\n        });\n    }\n    if(qid == quizchat_address_everyone &&\n     $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').attr('data-value') != qid){\n        add_divcontainer_after_question_select();\n    }\n    noparticipant_flag = false;\n};\n\n// Utility function to wait for an element to exist in the DOM\nconst waitForElement = (selector, callback) => {\n    const element = document.querySelector(selector);\n    if (element) {\n        callback();\n    } else {\n        const observer = new MutationObserver(() => {\n            const element = document.querySelector(selector);\n            if (element) {\n                observer.disconnect();\n                callback();\n            }\n        });\n        observer.observe(document.body, { childList: true, subtree: true });\n    }\n};\n\nconst observeSelectedQuestion= (qid, pid) => {\n    const targetElement = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]')[0];\n    // Check if the data-value matches the qid\n    if (targetElement.dataset.value === qid) {\n        // Execute the steps\n        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').trigger('click');\n        observeForElement('#block_quizchat_instructor_form li[data-value=\"'+pid+'\"]');\n    }\n};\n\nconst add_divcontainerquestions = () => {\n    let contains_questions_div = $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').find(\n        '.divcontainer-questions').length > 0;\n        if(!contains_questions_div &&\n            $('#fitem_id_block_quizchat_questions_select span[role=\"option\"]').attr('data-value')\n            == quizchat_general_question_id) {\n            $('#block_quizchat_questions_form span[role=\"option\"]').each(function() {\n                // replace the existing content with HTML content\n                $(this).contents().last().replaceWith(htmlContent_questions);\n            });\n        }\n};\n\nconst click_to_respond = (questionid, questiontxt) => {\n    let select_list_q = $('#block_quizchat_questions_form ul.form-autocomplete-suggestions');\n    let existing_list_item_q = $('li[role=\"option\"][data-value=\"' + questionid + '\"]', select_list_q);\n    let listitem_q = '<li role=\"option\" data-value=\"' + questionid + '\"></li>';\n    let menu_select_q = $('#id_block_quizchat_questions_select');\n    let existing_option_q = $('option[value=\"' + questionid + '\"', menu_select_q);\n    let option_q = '<option value=\"' + questionid + '\"></option>';\n    let divcontainer_q = $('<div class=\"divcontainer-questions\"></div>');\n    let childdiv_q = '<div class=\"questions-menu\" title=\"' + questiontxt + '\">' + questiontxt + '</div>';\n    let li_to_click_q = '#block_quizchat_questions_form ul.form-autocomplete-suggestions li[role=\"option\"][data-value=\"'\n                    + questionid + '\"]';\n    click_to_respond_process (select_list_q, existing_list_item_q, listitem_q, menu_select_q, existing_option_q,\n        option_q, divcontainer_q, childdiv_q, li_to_click_q);\n};\n\nconst click_to_respond_process = (select_list, existing_list_item, listitem, menu_select,\n     existing_option, option, divcontainer, childdiv, li_to_click) => {\n    divcontainer.append(childdiv);\n    if(0 === existing_list_item.length) {\n        select_list.append($(listitem).append(divcontainer));\n    }\n    if(0 === existing_option.length) {\n        menu_select.append($(option).append(divcontainer));\n    }\n    $(li_to_click).trigger('click');\n};\n\nconst setMenus = () => {\n    htmlContent_participants = '<div title=\"' + lang_strings['everyone']\n    + '\" class=\"divcontainer\"><div class=\"participant-name-menu\" title=\"'\n    + lang_strings['everyone'] + '\">'\n    + lang_strings['everyone'] + '</div></div>';\n    htmlContent_questions = '<div title=\"' + lang_strings['student_question_general']\n            + '\" class=\"divcontainer-questions\"><div class=\"questions-menu\" title=\"'\n            + lang_strings['student_question_general'] + '\">'\n            + lang_strings['student_question_general'] + '</div></div>';\n    htmlContent_q_select = $('#id_block_quizchat_questions_select').children().clone();\n    htmlContent_p_select = $('#id_block_quizchat_users_select').children().clone();\n    add_divcontainerquestions();\n    $('#block_quizchat_instructor_form span[role=\"option\"]').each(function() {\n        // replace the existing content with HTML content\n        $(this).contents().last().replaceWith(htmlContent_participants);\n    });\n    $('#block_quizchat_questions_form span[role=\"option\"]').attr('data-value',quizchat_general_question_id);\n    $('#block_quizchat_questions_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_general_question_id);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').attr('data-value',quizchat_address_everyone);\n    $('#block_quizchat_instructor_form span[role=\"option\"]').parent().attr('data-active-value',quizchat_address_everyone);\n};\n\nconst help_click = () => {\n    $('#rolepermission_link').on('click', function(event) {\n            event.preventDefault();\n            // Get the href attribute value\n            let hrefValue = $('#rolepermission_link').attr('href');\n            let newwindow = window.open(hrefValue,'rolepermission_link',\n            '_blank', 'toolbar=yes,scrollbars=yes,resizable=yes,width=600,height=600');\n            if (window.focus) {newwindow.focus();}\n        });\n    };\n\nconst fullscreen_click = (event) => {\n            event.preventDefault();\n            // Get the href attribute value\n            let hrefValue = $('.fullscreen_actionmenu_item').attr('href');\n            window.open(hrefValue, '_blank', 'toolbar=yes,scrollbars=yes,resizable=yes');\n    };\n\nconst ul_callback = (mutations) => {\n    for (var mutation of mutations) {\n        if (mutation.type === 'childList') {\n            let attr = $('#block_quizchat_questions_form ul.form-autocomplete-suggestions').attr('aria-hidden');\n            if (typeof attr == 'undefined' || attr == false) {\n                let chosen_option_span = $('#block_quizchat_questions_form span[role=\"option\"]');\n                if(chosen_option_span.length > 0) {\n                    let active_li = $('#block_quizchat_questions_form ul li[aria-selected=\"true\"]');\n                    if($(active_li).length > 0) {\n                        if(parseInt($(active_li).attr('data-value')) !== parseInt($(chosen_option_span).attr('data-value'))) {\n                            // Menu is visible, trigger deselection of the selected item\n                            $('#block_quizchat_questions_form ul.form-autocomplete-suggestions li[aria-selected=\"true\"]')\n                            .attr('aria-selected', 'false');\n                        }\n                    }\n\n                }\n            }\n        }\n    }\n};\n\nconst ul_callback_p = (mutations) => {\n    for (var mutation of mutations) {\n        if (mutation.type === 'childList') {\n            let attr = $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions').attr('aria-hidden');\n            if (typeof attr == 'undefined' || attr == false) {\n                let chosen_option_span = $('#block_quizchat_instructor_form span[role=\"option\"]');\n                if(chosen_option_span.length > 0) {\n                    let active_li = $('#block_quizchat_instructor_form ul li[aria-selected=\"true\"]');\n                    if($(active_li).length > 0) {\n                        if(parseInt($(active_li).attr('data-value')) !== parseInt($(chosen_option_span).attr('data-value'))\n                        ) {\n                            if(!li_clicked) {\n                                // Menu is visible, trigger deselection of the selected item\n                            $('#block_quizchat_instructor_form ul.form-autocomplete-suggestions li[aria-selected=\"true\"]')\n                            .attr('aria-selected', 'false');\n                            }\n                            else {\n                                li_clicked = false;\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n    }\n};\n\nconst toggle_autocomplete = (enable, parentElement) => {\n    if (parentElement.length) {\n        if(enable) {\n            if(parentElement.is(':hidden')) {\n                parentElement.attr('style','display:block !important;');\n            }\n        } else {\n            if(!parentElement.is(':hidden')) {\n                parentElement.attr('style','display:none !important;');\n            }\n        }\n    }\n};\n\nexport const sidemenu_conv_link_clicked = (event) => {\n    event.preventDefault();\n    // href is '#userid\n    const anchorElement = event.target.closest('a');\n    const userid= anchorElement.getAttribute('href').substring(1);\n    write_sessionStorage('selected_user_or_question_id', userid);\n    write_sessionStorage('grp_flag', false);\n    update_conversation_header(userid,false);\n    $('#block_quizchat_messages > .block_quizchat_msg_area_body').empty();\n    resetMenus();\n    toggle_autocomplete(true, $('#fitem_id_block_quizchat_questions_select'));\n    toggle_autocomplete(false, $('#fitem_id_block_quizchat_users_select'));\n    write_sessionStorage('total_unread_msg_usr_qs', 0);\n    let p_user = quizchat_msg.p_users.find(el => el.userid === parseInt(userid));\n    let msg_ids_str = p_user.message_ids.replace(/\\s/g, '').split(',');\n    let msg_ids = msg_ids_str.map(id => parseInt(id));\n    let filteredMessages = quizchat_msg.messages.filter(msg => msg_ids.includes(msg.id));\n    update_current_msgs_array(filteredMessages);\n    let key = 'newmsgscount_userid_'+ userid;\n    let msgs_count = int_sessionStorage(key);\n    write_sessionStorage('latest_msg_id_usr_qs', msg_ids[msg_ids.length - msgs_count- 1]);\n    update_msg_area(filteredMessages.length);\n    write_sessionStorage('latest_msg_id_usr_qs', msg_ids[msg_ids.length - 1]);\n    write_sessionStorage('newmsgscount_all', int_sessionStorage('newmsgscount_all') - int_sessionStorage(key));\n    write_sessionStorage(key, '0');\n    // Second parameter is true if the first one is question id\n    newmsgs_count_notf(userid, false);\n};\n\nexport const sidemenu_gconv_link_clicked = (event) => {\n    event.preventDefault();\n    // href is '#question_id\n    const anchorElement = event.target.closest('a');\n    const questionid= anchorElement.getAttribute('href').substring(1);\n    write_sessionStorage('selected_user_or_question_id', questionid);\n    write_sessionStorage('grp_flag', true);\n    update_conversation_header(questionid,true);\n    $('#block_quizchat_messages > .block_quizchat_msg_area_body').empty();\n    toggle_autocomplete(false, $('#fitem_id_block_quizchat_questions_select'));\n    toggle_autocomplete(false, $('#fitem_id_block_quizchat_users_select'));\n    write_sessionStorage('total_unread_msg_usr_qs', 0);\n    let group = quizchat_msg.groups.find(el => el.question_id === parseInt(questionid));\n    let msg_ids_str = group.message_ids.replace(/\\s/g, '').split(',');\n    let msg_ids = msg_ids_str.map(id => parseInt(id));\n    let filteredMessages = quizchat_msg.messages.filter(msg => msg_ids.includes(msg.id));\n    update_current_msgs_array(filteredMessages);\n    let key = 'newmsgscount_questionid_'+ questionid;\n    let msgs_count = int_sessionStorage(key);\n    write_sessionStorage('latest_msg_id_usr_qs', msg_ids[msg_ids.length - msgs_count- 1]);\n    update_msg_area(filteredMessages.length);\n    write_sessionStorage('latest_msg_id_usr_qs', msg_ids[msg_ids.length - 1]);\n    write_sessionStorage('newmsgscount_all', int_sessionStorage('newmsgscount_all') - int_sessionStorage(key));\n    write_sessionStorage(key, '0');\n    // Second parameter is true if the first one is question id\n    newmsgs_count_notf(questionid, true);\n};\n\nexport const allmsgs_link_clicked = (event) => {\n    event.preventDefault();\n    // href is '#question_id\n    update_conversation_header(allmsgs_id,false);\n    $('#block_quizchat_messages > .block_quizchat_msg_area_body').empty();\n    resetMenus();\n    toggle_autocomplete(true, $('#fitem_id_block_quizchat_questions_select'));\n    toggle_autocomplete(true, $('#fitem_id_block_quizchat_users_select'));\n    write_sessionStorage('selected_user_or_question_id', allmsgs_id);\n    write_sessionStorage('grp_flag', false);\n    update_current_msgs_array(quizchat_msg.messages);\n    let msgs = quizchat_msg.messages;\n    update_msg_area(msgs.length);\n    Object.keys(sessionStorage).forEach(key => {\n        if (key.includes('newmsgscount_')) {\n            sessionStorage.setItem(key, '0');\n        }\n    });\n    $('span[id*=\"unread-count-question-\"], span[id*=\"unread-count-user-\"]').each(function() {\n        let span_id = $(this).attr('id');\n        let parts = span_id.split('-');\n        let second_last_part = parts[parts.length - 2];\n        let question_or_user_id = parseInt(parts[parts.length - 1]);\n        let is_question = second_last_part === 'question';\n        newmsgs_count_notf(question_or_user_id, is_question);\n    });\n};\n\nexport const newmsgs_count_notf = (question_or_user_id, is_questionid) => {\n    let span_id = '#unread-count-' + (is_questionid ? 'question' : 'user') +'-' + String(question_or_user_id);\n    let key = 'newmsgscount_'+(is_questionid ? 'questionid' : 'userid')+'_'+ String(question_or_user_id);\n    let msgs_count = int_sessionStorage(key);\n    let header_question_or_user_id, header_is_allmsgs = false;\n    if($('#conv-header').data('group-id') !== undefined) {\n        header_question_or_user_id = parseInt($('#conv-header').data('group-id'));\n        if(header_question_or_user_id == allmsgs_id)\n        {\n            header_is_allmsgs = true;\n        }\n    }\n    else if($('#conv-header').data('user-id') !== undefined){\n        header_question_or_user_id = parseInt($('#conv-header').data('user-id'));\n    }\n    if(msgs_count > 0) {\n        let key_all = 'newmsgscount_all';\n        let session_msgs_count_all = 0;\n        if(parseInt($(span_id).html()) !== msgs_count) {\n            $(span_id).html(String(msgs_count));\n            $(span_id).attr('aria-hidden','false');\n            $(span_id).parent('span').removeClass('hidden');\n        }\n        Object.keys(sessionStorage).forEach(sessionkey => {\n            if (sessionkey.includes('newmsgscount_questionid_') || sessionkey.includes('newmsgscount_userid_')) {\n                session_msgs_count_all += parseInt(sessionStorage.getItem(sessionkey));\n            }\n        });\n        write_sessionStorage(key_all, String(session_msgs_count_all));\n        allmsgs_count_notf();\n        //update allmsgs session\n        if(header_is_allmsgs) {\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_')) {\n                    sessionStorage.setItem(sessionkey, '0');\n                }\n            });\n        }\n        else {\n            if(header_question_or_user_id == question_or_user_id) {\n                write_sessionStorage(key, '0');\n            }\n            session_msgs_count_all = 0;\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_questionid_') || sessionkey.includes('newmsgscount_userid_')) {\n                    session_msgs_count_all += parseInt(sessionStorage.getItem(sessionkey));\n                }\n            });\n            write_sessionStorage(key_all, String(session_msgs_count_all));\n        }\n    }\n    else {\n        $(span_id).attr('aria-hidden','true');\n        $(span_id).parent('span').addClass('hidden');\n        $(span_id).html('');\n    }\n};\n\nconst update_conversation_header = (id, groupFlag) => {\n    $('.header-container').empty();\n    let ar = (id==allmsgs_id?[]:(groupFlag?quizchat_msg.groups:quizchat_msg.p_users));\n    let element = (id==allmsgs_id?[]:ar.find(el =>\n        (groupFlag ? el.question_id === parseInt(id) : el.userid === parseInt(id))\n    ));\n    if(typeof element == 'undefined') {\n        element = quizchat_users.find(u => u.id === parseInt(id));\n        element.picture = element.profileimageurlsmall;\n        element.userid = element.id;\n    }\n    let conv_header =\n    $('<div class=\"bg-white position-relative border-bottom p-1 px-sm-2\" data-region=\"view-conversation\" data-from-panel=\"true\">'+\n        '<div class=\"\" data-region=\"header-content\">'+\n            '<div class=\"d-flex align-items-center\">'+\n                '<div class=\"d-flex text-truncate\">'+\n                        '<div class=\"d-flex align-items-center\">'+\n                            '<img class=\"rounded-circle\" '+\n                            'src=\"'+\n                            (id==allmsgs_id?grp_img_white_grey:\n                            (groupFlag?(element.question_id == quizchat_address_everyone?grp_img_white_grey:\n                            grp_img_white):element.picture))+\n                            '\" alt=\"'+\n                            (id==allmsgs_id?'All messages':\n                            (groupFlag?element.group_name:element.fullname))+'\" aria-hidden=\"true\" style=\"height: 38px\">'+\n                            '<span id=\"conv-header\" class=\"contact-status-header icon-size-2 \" '+\n                            (id==allmsgs_id?'data-group-id=\"'+allmsgs_id:\n                            (groupFlag?'data-group-id=\"'+element.question_id:'data-user-id=\"'+element.userid))+\n                            '\">'+\n                            (groupFlag||id==allmsgs_id?' ':'<div id=\"header-state\" class=\"statecircle-base '+element.state+'\" '+\n                            'data-user-id=\"'+element.userid +\n                            '\" title=\"'+lang_strings[element.state]+'\"></div>')+'</span>'+\n                        '</div>'+\n                        '<div class=\"w-100 text-truncate ml-2\">'+\n                            '<div class=\"d-flex\">'+\n                                '<strong class=\"m-0 text-truncate\">'+\n                                (id==allmsgs_id?'All messages':(groupFlag?element.group_name:element.fullname))+\n                                '</strong>'+\n                            '</div>'+\n                            //All messages description\n                            '<p id=\"written-header-state\" class=\"m-0 font-weight-light text-truncate\">'+\n                            (id==allmsgs_id?' ':\n                            //Group messages description\n                            (groupFlag?' ':lang_strings[element.state]))+\n                            '</p>'+\n                        '</div>'+\n                '</div>'+\n            '</div>'+\n        '</div>'+\n    '</div>');\n    $('.header-container').append(conv_header);\n};\n\nexport const btn_msg_me_click = () => {\n    if(typeof quizchat_msg.p_users != 'undefined') {\n        let new_msgs_count, msgs_count, key;\n        $('#conversations_container_private').empty();\n        let msgs = quizchat_msg;\n        if(typeof quizchat_msg_counters !== 'undefined') {\n            msgs = quizchat_msg_counters;\n        }\n        msgs.p_users.forEach(user => {\n        new_msgs_count = (typeof user.new_msgs_count == 'undefined'? 0 : user.new_msgs_count);\n        key = 'newmsgscount_userid_'+ String(user.userid);\n        msgs_count = sessionStorage.getItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key);\n        if(null === msgs_count) {\n            write_sessionStorage(key, String(new_msgs_count));\n            msgs_count = new_msgs_count;\n        }\n        else {\n            msgs_count = int_sessionStorage(key) + new_msgs_count;\n            write_sessionStorage(key, String(msgs_count));\n        }\n        // Split the message_ids string into an array and get the last item\n        let messageIdsArray = user.message_ids.split(', ');\n        let lastMessageId = messageIdsArray[messageIdsArray.length - 1];\n        let user_last_msg = quizchat_msg.messages.filter(msg => (msg.id == lastMessageId));\n        let msg_time = new Date(user_last_msg[0].timestamp * 1000);\n        let displayDate = isToday(user_last_msg[0].timestamp) ?\n        msg_time.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }) : msg_time.toLocaleDateString(\"en-GB\");\n            let conv_link =\n            $('<a href=\"#'+user.userid\n            +'\" class=\"py-0 px-2 d-flex list-group-item list-group-item-action align-items-center\" '+\n            'data-conversation-id=\"-\" '+\n            'data-user-id=\"'+user.userid+'\" role=\"button\" id=\"side-menu-conv-link-user-'+String(user.userid)+'\">'+\n            '<img class=\"rounded-circle align-self-start mt-2\" '+\n            'src=\"'+user.picture+'\" '+\n            'title=\"'+user.fullname+'\" '+\n            'alt=\"'+user.fullname+'\" aria-hidden=\"true\" style=\"height: 38px\">'+\n                    '<span class=\"contact-status-sidemenu icon-size-2 \" '+'data-user-id=\"'+user.userid+'\">'+\n                    '<div class=\"statecircle-base '+user.state+'\" title=\"'+lang_strings[user.state]+'\"></div>'+\n                    '</span>'+\n                    '<div class=\"w-100 text-truncate ml-2 my-2\">'+\n                        '<div class=\"d-flex\">'+\n                            '<strong class=\"m-0 text-truncate\">'+user.fullname+'</strong>'+\n                            '<span class=\"hidden\" data-region=\"contact-icon-blocked\">'+\n                                '<i class=\"icon fa fa-ban fa-fw \" title=\"Contact blocked\" '\n                                +'role=\"img\" aria-label=\"Contact blocked\"></i>'+\n                            '</span>'+\n                            '<span class=\"hidden\" data-region=\"muted-icon-container\">'+\n                                '<i class=\"icon fa fa-microphone-slash fa-fw \" aria-hidden=\"true\"></i>'+\n                            '</span>'+\n                        '</div>'+\n                        '<p class=\"m-0 font-weight-light text-truncate last-message\" data-region=\"last-message\">'\n                        +(user_last_msg[0].userid == quizchat_userid?\n                            lang_strings['sidemenu_you']+': <span>'+user_last_msg[0].message+'</span>':\n                        '<span>'+user_last_msg[0].message+'</span>')\n                        +'</p>'+\n                    '</div>'+\n                    '<div class=\"d-flex align-self-stretch\">'+\n                        '<div class=\"px-2 py-1 small position-absolute position-right \" '+\n                        'data-region=\"last-message-date\" aria-hidden=\"true\">'+ displayDate +'</div>'+\n                        '<div class=\"d-flex align-self-center align-items-center\">'+\n                            '<span class=\"badge rounded-pill bg-primary text-white '+\n                            (msgs_count > 0 ? '' :'hidden')\n                            +'\" data-region=\"unread-count\">'+\n                                '<span id=\"unread-count-user-'+ user.userid +'\" data-user-id=\"'+ user.userid +'\">'\n                                + (msgs_count > 0 ? String(msgs_count) :'')\n                                +'</span>'+\n                            '</span>'+\n                            '<div class=\"text-muted ml-auto\">'+\n                                '<span class=\"dir-rtl-hide\">'+\n                                    '<i class=\"icon fa fa-chevron-right fa-fw \" aria-hidden=\"true\"></i>'+\n                                '</span>'+\n                                '<span class=\"dir-ltr-hide\">'+\n                                    '<i class=\"icon fa fa-chevron-left fa-fw \" aria-hidden=\"true\"></i>'+\n                                '</span>'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>'+\n                '</a>');\n            $('#conversations_container_private').append(conv_link);\n            // Second parameter is false if the first one is user id\n            newmsgs_count_notf(user.userid, false);\n        });\n        let header_question_or_user_id, header_is_allmsgs = false;\n        if($('#conv-header').data('group-id') !== undefined) {\n            header_question_or_user_id = parseInt($('#conv-header').data('group-id'));\n            if(header_question_or_user_id == allmsgs_id)\n            {\n                header_is_allmsgs = true;\n            }\n        }\n        else if($('#conv-header').data('user-id') !== undefined){\n            header_question_or_user_id = parseInt($('#conv-header').data('user-id'));\n        }\n        if(header_is_allmsgs) {\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_')) {\n                    sessionStorage.setItem(sessionkey, '0');\n                }\n            });\n        }\n        else {\n            let session_msgs_count_all = 0;\n            let key_all = 'newmsgscount_all';\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_questionid_') || sessionkey.includes('newmsgscount_userid_')) {\n                    session_msgs_count_all += parseInt(sessionStorage.getItem(sessionkey));\n                }\n            });\n            write_sessionStorage(key_all, String(session_msgs_count_all));\n            allmsgs_count_notf();\n        }\n        $('#conversations_container_private').off('click', 'a', sidemenu_conv_link_clicked);\n        $('#conversations_container_private').on('click','a', sidemenu_conv_link_clicked);\n    }\n};\n\nexport const btn_msg_grp_click = () => {\n    if(typeof quizchat_msg.groups != 'undefined') {\n        let new_msgs_count, msgs_count, key;\n        $('#conversations_container_group').empty();\n        let msgs = quizchat_msg;\n        if(typeof quizchat_msg_counters !== 'undefined') {\n            msgs = quizchat_msg_counters;\n        }\n        msgs.groups.forEach(group => {\n        new_msgs_count = (typeof group.new_msgs_count == 'undefined'? 0 : group.new_msgs_count);\n        key = 'newmsgscount_questionid_'+ String(group.question_id);\n        msgs_count = sessionStorage.getItem('moodle_qc_' + quizchat_userid + '_' + quizchatid + '_' + key);\n        if(null === msgs_count) {\n            write_sessionStorage(key, String(new_msgs_count));\n            msgs_count = new_msgs_count;\n        }\n        else {\n            msgs_count = int_sessionStorage(key) + new_msgs_count;\n            write_sessionStorage(key, String(msgs_count));\n        }\n        // Split the message_ids string into an array and get the last item\n        let messageIdsArray = group.message_ids.split(',');\n        let lastMessageId = messageIdsArray[messageIdsArray.length - 1];\n        let group_last_msg = quizchat_msg.messages.filter(msg => (msg.id == lastMessageId));\n        let msg_time = new Date(group_last_msg[0].timestamp * 1000);\n        let displayDate = isToday(group_last_msg[0].timestamp) ?\n        msg_time.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }) : msg_time.toLocaleDateString(\"en-GB\");\n            let conv_link =\n            $('<a href=\"#'+group.question_id\n            +'\" class=\"py-0 px-2 d-flex list-group-item list-group-item-action align-items-center\" '+\n            'data-conversation-id=\"-\" '+\n            'data-group-id=\"'+group.question_id+'\" role=\"button\" id=\"side-menu-conv-link-question-'+String(group.question_id)+'\">'+\n            '<img class=\"rounded-circle align-self-start mt-2\" '+\n            'src=\"'+(group.question_id == quizchat_address_everyone?grp_img_white_grey:\n                grp_img_white) +'\" '\n            +'title=\"'+group.group_name+'\" '\n            +'alt=\"'+group.group_name+'\" aria-hidden=\"true\" style=\"height: 38px\">'+\n                    '<span class=\"contact-status icon-size-2 \">'+\n                    '</span>'+\n                    '<div class=\"w-100 text-truncate ml-2 my-2\">'+\n                        '<div class=\"d-flex\">'+\n                            '<strong class=\"m-0 text-truncate\">'+group.group_name+'</strong>'+\n                            '<span class=\"hidden\" data-region=\"contact-icon-blocked\">'+\n                                '<i class=\"icon fa fa-ban fa-fw \" title=\"Contact blocked\" '\n                                +'role=\"img\" aria-label=\"Contact blocked\"></i>'+\n                            '</span>'+\n                            '<span class=\"hidden\" data-region=\"muted-icon-container\">'+\n                                '<i class=\"icon fa fa-microphone-slash fa-fw \" aria-hidden=\"true\"></i>'+\n                            '</span>'+\n                        '</div>'+\n                        '<p class=\"m-0 font-weight-light text-truncate last-message\" data-region=\"last-message\">'\n                        +(group_last_msg[0].userid == quizchat_userid?\n                            lang_strings['sidemenu_you']+': <span>'+group_last_msg[0].message+'</span>':\n                        '<span>'+group_last_msg[0].message+'</span>')\n                        +'</p>'+\n                    '</div>'+\n                    '<div class=\"d-flex align-self-stretch\">'+\n                        '<div class=\"px-2 py-1 small position-absolute position-right \" '+\n                        'data-region=\"last-message-date\" aria-hidden=\"true\">'+displayDate+'</div>'+\n                        '<div class=\"d-flex align-self-center align-items-center\">'+\n                            '<span class=\"badge rounded-pill bg-primary text-white '+\n                            (msgs_count > 0 ? '' :'hidden')\n                            +'\" data-region=\"unread-count\">'+\n                                '<span id=\"unread-count-question-'+ group.question_id\n                                +'\" data-question-id=\"'+ group.question_id +'\">'\n                                + (msgs_count > 0 ? String(msgs_count) :'')\n                                +'</span>'+\n                            '</span>'+\n                            '<div class=\"text-muted ml-auto\">'+\n                                '<span class=\"dir-rtl-hide\">'+\n                                    '<i class=\"icon fa fa-chevron-right fa-fw \" aria-hidden=\"true\"></i>'+\n                                '</span>'+\n                                '<span class=\"dir-ltr-hide\">'+\n                                    '<i class=\"icon fa fa-chevron-left fa-fw \" aria-hidden=\"true\"></i>'+\n                                '</span>'+\n                            '</div>'+\n                        '</div>'+\n                    '</div>'+\n                '</a>');\n            $('#conversations_container_group').append(conv_link);\n            // Second parameter is true if the first one is question id\n            newmsgs_count_notf(group.question_id, true);\n        });\n        let header_question_or_user_id, header_is_allmsgs = false;\n        if($('#conv-header').data('group-id') !== undefined) {\n            header_question_or_user_id = parseInt($('#conv-header').data('group-id'));\n            if(header_question_or_user_id == allmsgs_id)\n            {\n                header_is_allmsgs = true;\n            }\n        }\n        else if($('#conv-header').data('user-id') !== undefined){\n            header_question_or_user_id = parseInt($('#conv-header').data('user-id'));\n        }\n        if(header_is_allmsgs) {\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_')) {\n                    sessionStorage.setItem(sessionkey, '0');\n                }\n            });\n        }\n        else {\n            let session_msgs_count_all = 0;\n            let key_all = 'newmsgscount_all';\n            Object.keys(sessionStorage).forEach(sessionkey => {\n                if (sessionkey.includes('newmsgscount_questionid_') || sessionkey.includes('newmsgscount_userid_')) {\n                    session_msgs_count_all += parseInt(sessionStorage.getItem(sessionkey));\n                }\n            });\n            write_sessionStorage(key_all, String(session_msgs_count_all));\n            allmsgs_count_notf();\n        }\n        $('#conversations_container_group').off('click', 'a', sidemenu_gconv_link_clicked);\n        $('#conversations_container_group').on('click','a', sidemenu_gconv_link_clicked);\n    }\n};\n\nexport const init_instructor = (arg_quizchat, confingsetting_msglen, reqmsg, receivergroups) => {\n    is_teacher = true;\n    import('block_quizchat/master').then(() => {\n        quizchatobj = arg_quizchat;\n        msglen = confingsetting_msglen;\n        requiredmsg = reqmsg;\n        groups = receivergroups;\n        $('#id_block_quizchat_users_select').change(() => {\n            // reset style of select label on correct selection\n            $('#block_quizchat_instructor_form label').css({'color': '#000', 'font-weight': 'normal'});\n        });\n        $('#id_block_quizchat_questions_select').on('change', questions_select_change);\n        $('#id_block_quizchat_users_select').on('change', users_select_change);\n        $('#id_block_quizchat_users_select').on('click', users_select_change);\n        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').on('click', users_select_change);\n        $('#block_quizchat_instructor_form span.form-autocomplete-downarrow').on('change', users_select_change);\n        $('#block_quizchat_instructor_form').submit(send_msg);\n        $('#permission-link').on('click', help_click);\n        $('.fullscreen_actionmenu_item').on('click', fullscreen_click);\n        $(textinputcontrolname).on('input',text_oninput);\n        $(textinputcontrolname).on('blur',text_onblur);\n        $(textinputcontrolname).on('invalid',text_setvalidmsg);\n        setFormsIfExist();\n        let targetNode = $('#block_quizchat_questions_form');\n        let targetNode_p = $('#block_quizchat_instructor_form');\n        let ul_config = {childList: true, subtree: true};\n        let ul_observer = new MutationObserver(ul_callback);\n        let ul_observer_participants = new MutationObserver(ul_callback_p);\n        ul_observer.observe(targetNode[0], ul_config);\n        ul_observer_participants.observe(targetNode_p[0], ul_config);\n        if(!full_screen_flag) {\n            write_sessionStorage('selected_user_or_question_id', \"-2\");\n            write_sessionStorage('grp_flag', false);\n        }\n        $('#block_quizchat_input_instructor_send').trigger('focus');\n        if($('#btn_msg_me')) {\n            $('#btn_msg_me').on('click', btn_msg_me_click);\n        }\n        if($('#btn_msg_all')) {\n            $('#btn_msg_all').on('click', btn_msg_grp_click);\n        }\n        if($('#allmsgs_link')) {\n            $('#allmsgs_link').on('click', allmsgs_link_clicked);\n        }\n        if(full_screen_flag) {\n            click_private_group_btns();\n        }\n    });\n};\n"],"names":["quizchatobj","msglen","requiredmsg","groups","textinputcontrolname","groupid","timeoutid","timeoutid_private_group_btns","htmlContent_participants","htmlContent_questions","htmlContent_q_select","htmlContent_p_select","noparticipant_flag","li_clicked","grp_img_white","M","util","image_url","grp_img_white_grey","cfg","wwwroot","is_teacher","send_msg","submit_event","receiverid","questionid","grps_ar","preventDefault","msg_text_input","document","querySelector","setCustomValidity","reportValidity","full_screen_flag","is","length","css","dataset","value","parseInt","quizchat_address_question_group","Object","keys","map","key","quizchat_address_everyone","quizchat_general_question_id","find","obj","name","id","prop","data","calls","methodname","args","val","then","resetMenus","trigger","catch","text_oninput","oninput_event","target","text_onblur","onblur_event","get_user_state","userid","quizchat_users","u","state","event","questiontxt","getAttribute","slice","split","traget_conv_id","target_conv_el","html","resetMenus_click_respond","update_user_select_status_indicators","blur","update_conversation_header","empty","toggle_autocomplete","filteredMessages","attr","each","i","el","isNaN","userstate","status_indicator_el","removeClass","addClass","lang_strings","chosen_option_span","chosen_userid","chosen_user_state","chosen_status_indicator","text_setvalidmsg","e","users_select_change","questions_select_change","enableflag","participantid","group_string","selected_question","selected_participant","String","observeForElement","gname","selected_participant_name","allgrouptxt","elementSelector","MutationObserver","mutationsList","observer","mutation","type","includes","disconnect","closest","first","observe","body","childList","subtree","add_divcontainer_after_question_select","add_divcontainerquestions","setTimeout","setFormsIfExist","q_form","p_form","setMenus","clearTimeout","click_private_group_btns","quizchat_msg","messages","trim","allmsgs_id","this","replaceWith","parent","remove","append","pid","qid","qtxt","click_to_respond","waitForElement","observeSelectedQuestion","selector","callback","contents","last","select_list_q","existing_list_item_q","listitem_q","menu_select_q","existing_option_q","option_q","divcontainer_q","click_to_respond_process","select_list","existing_list_item","listitem","menu_select","existing_option","option","divcontainer","childdiv","li_to_click","children","clone","help_click","on","hrefValue","newwindow","window","open","focus","fullscreen_click","ul_callback","mutations","active_li","ul_callback_p","enable","parentElement","sidemenu_conv_link_clicked","substring","msg_ids","p_users","message_ids","replace","filter","msg","msgs_count","newmsgs_count_notf","sidemenu_gconv_link_clicked","question_id","allmsgs_link_clicked","msgs","sessionStorage","forEach","setItem","parts","second_last_part","question_or_user_id","is_questionid","header_question_or_user_id","span_id","header_is_allmsgs","undefined","key_all","session_msgs_count_all","sessionkey","getItem","groupFlag","ar","element","picture","profileimageurlsmall","conv_header","group_name","fullname","btn_msg_me_click","new_msgs_count","quizchat_msg_counters","user","quizchat_userid","quizchatid","messageIdsArray","lastMessageId","user_last_msg","msg_time","Date","timestamp","displayDate","toLocaleTimeString","hour","minute","toLocaleDateString","conv_link","message","off","btn_msg_grp_click","group","group_last_msg","arg_quizchat","confingsetting_msglen","reqmsg","receivergroups","change","submit","targetNode","targetNode_p","ul_config","ul_observer","ul_observer_participants"],"mappings":"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"}